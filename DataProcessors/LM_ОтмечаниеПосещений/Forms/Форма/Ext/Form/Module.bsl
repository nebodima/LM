
&НаСервере
Процедура ПрименитьНаСервере()
	
	Для Каждого Стр из ТЗУроки Цикл
		
		ДокументИзменен = Ложь;
		
		Док = Стр.Урок.ПолучитьОбъект();
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ученик", Стр.Ученик);
		Строки = Док.Ученики.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого Стр1 из Строки Цикл
			Если Стр1.Явка <> Стр.Отметка Тогда
				Стр1.Явка = Стр.Отметка;
				ДокументИзменен = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ДокументИзменен Тогда
			Попытка
				Док.Записать();
			Исключение
				Сообщить("Не удалось записать " +Стр.Урок+ " по причине: " +ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;    	
	
КонецПроцедуры

&НаКлиенте
Процедура Применить(Команда)
	ПрименитьНаСервере();
	
	Состояние("Выполнено!");
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДатаНачала = ТекущаяДата()-(60*60*1);
	ДатаОкончания = ТекущаяДата()+(60*60*1);
	СформироватьВсе();
	
	#Если ВебКлиент Тогда
		ВидКлиента = "ВэбКлиент";
	#ИначеЕсли ТонкийКлиент Тогда
		ВидКлиента = "Тонкий";
	#ИначеЕсли Сервер Тогда
		ВидКлиента = "Сервер";
	#Иначе 
		ВидКлиента = "Неопределено";
	#КонецЕсли
	
	Если ВидКлиента <> "ВэбКлиент" Тогда
		Элементы.ТЗУроки.Высота = 0;
		Элементы.ТЗУроки.РастягиватьПоВертикали = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьВсе()
	
	ТекущееВремя = ТекущаяДата();
	
	ТЗУроки.Очистить();
	ЭтаФорма.ТЗУроки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УрокУченики.Ссылка КАК Ссылка,
	|	УрокУченики.Ученик КАК Ученик,
	|	УрокУченики.Явка,
	|	УрокУченики.Ссылка.ГруппаОбучения КАК ГруппаОбучения,
	|	УрокУченики.Ссылка.ПредметОбучения КАК ПредметОбучения,
	|	УрокУченики.Ссылка.Дата КАК ВремяНачала,
	|	УрокУченики.Ссылка.КоличествоЧасов,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(УрокУченики.Ссылка.Дата, ЧАС, ЧАС(УрокУченики.Ссылка.КоличествоЧасов)), МИНУТА, МИНУТА(УрокУченики.Ссылка.КоличествоЧасов)) КАК ВремяОкончания
	|ИЗ
	|	Документ.LM_Урок.Ученики КАК УрокУченики
	|ГДЕ
	|	УрокУченики.Ссылка.Проведен = ИСТИНА
	|	И УрокУченики.Ссылка.Дата >= &ДатаНачала
	|	И УрокУченики.Ссылка.Дата <= &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяНачала,
	|	ГруппаОбучения,
	|	Ученик
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Сч = 0;
	
	ГрОбуч = Справочники.LM_ГруппыОбучения.ПустаяСсылка();
	ПредмОбуч = Справочники.LM_ПредметыОбучения.ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
				
		Если ГрОбуч <> ВыборкаДетальныеЗаписи.ГруппаОбучения Тогда
			Сч = 0;
		КонецЕсли;
		
		Сч = Сч + 1;		
		
		НовСтрТЗ = ТЗУроки.Добавить();
		НовСтрТЗ.Урок 				= ВыборкаДетальныеЗаписи.Ссылка;
		НовСтрТЗ.Ученик 			= ВыборкаДетальныеЗаписи.Ученик;
		НовСтрТЗ.Отметка 			= ВыборкаДетальныеЗаписи.Явка;
		НовСтрТЗ.ГруппаОбучения 	= ВыборкаДетальныеЗаписи.ГруппаОбучения; 		
		НовСтрТЗ.ПредметОбучения 	= ВыборкаДетальныеЗаписи.ПредметОбучения;
		НовСтрТЗ.Цвет			 	= ВыборкаДетальныеЗаписи.ПредметОбучения.Цвет;
	
		НовСтрТЗ.Номер 				= Сч;
		НовСтрТЗ.ВремяНачала 		= ВыборкаДетальныеЗаписи.ВремяНачала;
		НовСтрТЗ.ВремяОкончания		= ВыборкаДетальныеЗаписи.ВремяОкончания;//ВыборкаДетальныеЗаписи.ВремяНачала-('00010101'-ВыборкаДетальныеЗаписи.КоличествоЧасов);
		
		Если (ВыборкаДетальныеЗаписи.ВремяНачала <= ТекущаяДата()) и (ВыборкаДетальныеЗаписи.ВремяОкончания >= ТекущаяДата()) Тогда
			НовСтрТЗ.Статус             = "Идёт";
		ИначеЕсли ВыборкаДетальныеЗаписи.ВремяОкончания < ТекущаяДата() Тогда
			НовСтрТЗ.Статус             = "Прошёл";
		ИначеЕсли ВыборкаДетальныеЗаписи.ВремяОкончания > ТекущаяДата() Тогда
			НовСтрТЗ.Статус             = "Будет";
		КонецЕсли;
		
		ГрОбуч = ВыборкаДетальныеЗаписи.ГруппаОбучения;
				
	КонецЦикла;

КонецПроцедуры

//&НаСервере
//Функция ОпределитьЦвет(Данные1)
//	
//	Попытка
//		Возврат WebЦвета[Данные1.Цвет];
//	Исключение
//		Возврат WebЦвета["Белый"];
//	КонецПопытки;
//	
//КонецФункции

&НаКлиенте
Процедура ЗавершитьРаботу(Команда)  	
	
	ЗавершитьРаботуСистемы(
        Ложь, // запрашивать возможность
        Ложь, // (необ.) перезапустить после завершения
        "" // (необ.) дополнительные параметры, если делается перезапуск
    );
	
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтрока(Команда)
	
	Попытка
		Элементы.ТЗУроки.ТекущаяСтрока = Элементы.ТЗУроки.ТекущаяСтрока+1;
		Если Элементы.ТЗУроки.ТекущаяСтрока = Неопределено Тогда
			Элементы.ТЗУроки.ТекущаяСтрока = 1;
		КонецЕсли;
	Исключение
		Элементы.ТЗУроки.ТекущаяСтрока = 1;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтрока(Команда)
	
	Попытка
		Элементы.ТЗУроки.ТекущаяСтрока = Элементы.ТЗУроки.ТекущаяСтрока-1;
		Если Элементы.ТЗУроки.ТекущаяСтрока = Неопределено Тогда
			Элементы.ТЗУроки.ТекущаяСтрока = ТЗУроки.Количество()-1;
		КонецЕсли;
	Исключение
		Элементы.ТЗУроки.ТекущаяСтрока = 1;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Отметить(Команда)
	
	Если Элементы.ТЗУроки.ТекущиеДанные.Отметка Тогда
		Элементы.ТЗУроки.ТекущиеДанные.Отметка = Ложь;
	Иначе
		Элементы.ТЗУроки.ТекущиеДанные.Отметка = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	СформироватьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ЧасВперед(Команда)	
	ДатаНачала = ДатаНачала + (60*60*1);
	ДатаОкончания = ДатаОкончания + (60*60*1);
	СформироватьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ЧасНазад(Команда)
	ДатаНачала = ДатаНачала - (60*60*1);
	ДатаОкончания = ДатаОкончания - (60*60*1);
	СформироватьВсе();
КонецПроцедуры
