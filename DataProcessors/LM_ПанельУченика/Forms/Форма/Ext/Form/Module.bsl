
&НаСервере
Процедура УченикПриИзмененииНаСервере()
	
	СписокУроков.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = СписокУроков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ученики.Ученик");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ученик;
	ЭлементОтбора = СписокУроков.Отбор.Элементы[0];
	ЭлементОтбора.Использование = Истина; 	
	Если НЕ ЗначениеЗаполнено(Ученик) Тогда
		ЭлементОтбора.Использование = Ложь;			
	КонецЕсли;
	
	//ЭлементОтбора2 = СписокУроков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	//ЭлементОтбора2.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	//ЭлементОтбора2.ПравоеЗначение = Период.ДатаНачала;
	//ЭлементОтбора2 = СписокУроков.Отбор.Элементы[1];
	//ЭлементОтбора2.Использование = Истина;
	//Если НЕ ЗначениеЗаполнено(Период.ДатаНачала) Тогда
	//	ЭлементОтбора2.Использование = Ложь;			
	//КонецЕсли;
	//
	//ЭлементОтбора3 = СписокУроков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора3.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	//ЭлементОтбора3.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ЭлементОтбора3.ПравоеЗначение = Период.ДатаОкончания;
	//ЭлементОтбора3 = СписокУроков.Отбор.Элементы[2];
	//ЭлементОтбора3.Использование = Истина;
	//Если НЕ ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
	//	ЭлементОтбора3.Использование = Ложь;			
	//КонецЕсли;
	
	//Элементы.СписокУроков.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	//Элементы.СписокУроков.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УченикПриИзменении(Элемент)
	
	УченикПриИзмененииНаСервере();	
	ОпределитьАктивныеГруппыОбучения();
	
	Если НЕ ЗначениеЗаполнено(Ученик) Тогда
		Элементы.АктивныеГруппыОбучения.ТолькоПросмотр = Истина;
	Иначе
		Элементы.АктивныеГруппыОбучения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьАктивныеГруппыОбучения()
	
	АктивныеГруппыОбучения.Очистить();
	
	Если ЗначениеЗаполнено(Ученик) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписанияСуммЗаУрокиОбороты.ГруппаОбучения,
		|	СписанияСуммЗаУрокиОбороты.ПредметОбучения
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Обороты(&НачалоПериода,&КонецПериода, Регистратор, ) КАК СписанияСуммЗаУрокиОбороты //&НачалоПериода,&КонецПериода
		|ГДЕ
		|	СписанияСуммЗаУрокиОбороты.Клиент = &Клиент
		|
		|СГРУППИРОВАТЬ ПО
		|	СписанияСуммЗаУрокиОбороты.ГруппаОбучения,
		|	СписанияСуммЗаУрокиОбороты.ПредметОбучения";
		Запрос.УстановитьПараметр("Клиент", Ученик);
		Если ЗначениеЗаполнено(Период.ДатаНачала) Тогда
			ДатаНач = Период.ДатаНачала;
			ДатаКон = Период.ДатаОкончания;
		Иначе
			ДатаНач = '00010101';
			ДатаКон = '20990101';
		КонецЕсли;
		Запрос.УстановитьПараметр("КонецПериода", ДатаКон);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНач);
		
		ТЗ = Запрос.Выполнить().Выгрузить();
		ТЗ.Свернуть("ГруппаОбучения"); //,ПредметОбучения
		
		Для Каждого Стр из ТЗ Цикл
			
			Если Стр.ГруппаОбучения = Справочники.LM_ГруппыОбучения.ПустаяСсылка() Тогда
				Продолжить;
			КонецЕсли;
			
			АктГруппаОбуч = АктивныеГруппыОбучения.Добавить();
			АктГруппаОбуч.ГруппаОбучения = Стр.ГруппаОбучения;
			//АктГруппаОбуч.ПредметОбучения = Стр.ПредметОбучения;
			АктГруппаОбуч.УрокРавен = (Стр.ГруппаОбучения.Продолжительность-'00010101 00:00:00')/60/60;  //'00010101 00:30:00'
			
			//Если ЗначениеЗаполнено(Период) Тогда
			//	АктГруппаОбуч.Период = Период;
			//Иначе
			//	АктГруппаОбуч.Период.ДатаНачала = КонецМесяца(ТекущаяДата())+1;
			//	АктГруппаОбуч.Период.ДатаОкончания = КонецМесяца(АктГруппаОбуч.Период.ДатаНачала);
			//КонецЕсли;
			
			
			Запрос2 = Новый Запрос;
			Запрос2.Текст = 
			"ВЫБРАТЬ
			|	СписанияСуммЗаУрокиОстатки.СуммаОстаток
			|ИЗ
			|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
			|ГДЕ
			|	СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
			//|	И СписанияСуммЗаУрокиОстатки.ГруппаОбучения = &ГруппаОбучения
			|	И СписанияСуммЗаУрокиОстатки.ПредметОбучения = &ПредметОбучения";	
			//Запрос2.УстановитьПараметр("ГруппаОбучения", Стр.ГруппаОбучения);
			Запрос2.УстановитьПараметр("ПредметОбучения", Стр.ГруппаОбучения.ПредметОбучения);
			Запрос2.УстановитьПараметр("Клиент", Ученик);	
			РезультатЗапроса = Запрос2.Выполнить();	
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				АктГруппаОбуч.Задолженность = ВыборкаДетальныеЗаписи.СуммаОстаток;
			КонецЦикла; 		
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УченикПриИзмененииНаСервере();
	ОпределитьАктивныеГруппыОбучения();
КонецПроцедуры




&НаСервере
Процедура Выполнить1НаСервере()
	
	Для Каждого СтрТЗ из АктивныеГруппыОбучения Цикл
		
		Если СтрТЗ.Выб Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрТЗ.ГруппаОбучения) Тогда
				Сч = Сч + 1;
				НовСтр = ТЗОписание.Добавить();
				НовСтр.Номер = Сч;
				НовСтр.Описание = "Не выбрана ГруппаОбучения!";
				Продолжить;					
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрТЗ.Период) Тогда
				Сч = Сч + 1;
				НовСтр = ТЗОписание.Добавить();
				НовСтр.Номер = Сч;
				НовСтр.Описание = "Не выбран период!";
				Продолжить;					
			КонецЕсли; 
			
			
			Если СтрТЗ.Действие = "Продлить" Тогда							
				Продлить(СтрТЗ);                  				
			ИначеЕсли СтрТЗ.Действие = "Удалить" Тогда
				Удалить(СтрТЗ);
			ИначеЕсли СтрТЗ.Действие = "Добавить" Тогда
				Добавить(СтрТЗ);
			ИначеЕсли СтрТЗ.Действие = "Перевести" Тогда
				//Перевести(СтрТЗ);
			ИначеЕсли СтрТЗ.Действие = "ПеремещениеДенег" Тогда
				ПеремещениеДенег(СтрТЗ);				
			Иначе
				Сч = Сч + 1;
				НовСтр = ТЗОписание.Добавить();
				НовСтр.Номер = Сч;
				НовСтр.Описание = "Не выбрано действие!";
			КонецЕсли; 			
			
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Выполнить1(Команда)
	ТЗОписание.Очистить();
	Сч = 0;
	
	ЕстьВыбранные = Ложь;
	Для Каждого Стр из АктивныеГруппыОбучения Цикл
		Если Стр.Выб Тогда
			ЕстьВыбранные = Истина;
		КонецЕсли;  		
	КонецЦикла;
	
	Если НЕ ЕстьВыбранные Тогда
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер = Сч;
		НовСтр.Описание = "Не отмечены галочки!";
	КонецЕсли;  	
	
	Выполнить1НаСервере();
	Элементы.СписокУроков.Обновить();
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Описание = "Завершено!";	
КонецПроцедуры

Процедура Продлить(СтрТЗ)
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Начало. Продление";
	
	//Продление с учетом 9 занятий. То есть 9-ое бесплатное
	//1. Определить даты для уроков из ГруппыОбучения и выбранного Периода 	
	//МассивДат = ВернутьМассивДатУроков(ДатаНач,ДатаКон,ГрОбуч);
	
	//1.2 Найти уроки выбранной ГруппыОбучения в будущемПериоде
	//2. Если Есть то добавляем в эти уроки
	//2.1 Если Нет то создаем Уроки
	ШаблонСтруктура = ПолучитьУрокИТарифПоследнегоУрокаПоУченику(СтрТЗ.ГруппаОбучения);
	ДобавитьУченикаВУроки(СтрТЗ,ШаблонСтруктура);	
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Окончание. Продление";
	
КонецПроцедуры

Процедура Добавить(СтрТЗ)
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Начало. Добавление";
	
	//Переменные
	
	ШаблонСтруктура = ПолучитьУрокИТарифПоследнегоУрокаПоУченику(СтрТЗ.ГруппаОбучения);
	ДобавитьУченикаВУроки(СтрТЗ,ШаблонСтруктура);	
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Окончание. Добавление";
	
КонецПроцедуры

Процедура Удалить(СтрТЗ)
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Начало. Удаление из группы";
	
	УдалениеУченикаИзУрока(СтрТЗ);	
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Окончание. Удаление из группы";
	
КонецПроцедуры

Процедура УдалениеУченикаИзУрока(СтрТЗ)
	
	Для Каждого Д из СтрТЗ.Период Цикл 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УрокУченики.Ссылка
		|ИЗ
		|	Документ.LM_Урок.Ученики КАК УрокУченики
		|ГДЕ
		|	УрокУченики.Ссылка.Дата = &Дата
		|	И УрокУченики.Ссылка.Проведен = ИСТИНА
		|	И УрокУченики.Ссылка.ГруппаОбучения = &ГруппаОбучения
		|	И УрокУченики.Ученик = &Ученик";
		Запрос.УстановитьПараметр("Дата", Д.Значение);
		Запрос.УстановитьПараметр("Ученик", Ученик);
		Запрос.УстановитьПараметр("ГруппаОбучения", СтрТЗ.ГруппаОбучения);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда			
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				Урок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				Для Каждого Стр Из Урок.Ученики Цикл
					Если Стр.Ученик = Ученик Тогда
						
						Если Урок.Ученики.Количество() > 1 Тогда
							с = Урок.Ученики.Индекс(Урок.Ученики.Найти(Ученик,"Ученик"));
							Урок.Ученики.Удалить(с);
							
							Попытка
								Урок.Записать(РежимЗаписиДокумента.Проведение);
								Сч = Сч + 1;
								НовСтр = ТЗОписание.Добавить();
								НовСтр.Номер = Сч;
								НовСтр.Действие = СтрТЗ.Действие;
								НовСтр.Описание = "Удален ученик " +Ученик;
								НовСтр.Урок		= Урок.Ссылка;
								НовСтр.ДопОписание = "Проведение";
								
							Исключение
								Сообщить("Не удалось провести урок: " +Урок.Ссылка+ " " +ОписаниеОшибки());
							КонецПопытки;
						Иначе
							Попытка
								Урок.УстановитьПометкуУдаления(Истина);
								Сч = Сч + 1;
								НовСтр = ТЗОписание.Добавить();
								НовСтр.Номер = Сч;
								НовСтр.Действие = СтрТЗ.Действие;
								НовСтр.Описание = "Удаление пустого урока";
								НовСтр.Урок		= Урок.Ссылка;
								НовСтр.ДопОписание = "Пометка удаления";
							Исключение
								Сообщить("Не удалось пометить на удаление урок: " +Урок.Ссылка+ " " +ОписаниеОшибки());
							КонецПопытки;
							
						КонецЕсли;					
						
					КонецЕсли;					
				КонецЦикла;				
			КонецЦикла;

						
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура ПеремещениеДенег(СтрТЗ)
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Начало. ПеремещениеДенег";
	
	ПереместитьДеньги(СтрТЗ);	
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер = Сч;
	НовСтр.Действие = СтрТЗ.Действие;
	НовСтр.Описание = "Окончание. ПеремещениеДенег";
	
КонецПроцедуры


&НаКлиенте
Процедура АктивныеГруппыОбученияДействиеПриИзменении(Элемент)
	
	Если Элемент.ТекстРедактирования = "Продлить группу" Тогда
		//Элементы.АктивныеГруппыОбученияПериод.Видимость = Истина;
		РассчитатьПериоды("СледующийМесяц");
	ИначеЕсли Элемент.ТекстРедактирования = "Перевести из группы" Тогда
		Элементы.АктивныеГруппыОбученияГруппаОбучения2.Видимость = Истина;
		РассчитатьПериоды(Неопределено);
	Иначе 
		РассчитатьПериоды(Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

Функция ВернутьМассивДатУроков(ДатаНач,ДатаКон,ГрОбуч)
	
	СписокДат = Новый СписокЗначений;
	
	ДатаВыбора = ДатаНач;
	Пока ДатаВыбора <= ДатаКон Цикл
		
		Если ГрОбуч.Пн = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Пн" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Вт = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Вт" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Ср = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Ср" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Чт = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Чт" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Пт = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Пт" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Сб = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Сб" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101')); 
			КонецЕсли;
		КонецЕсли;
		Если ГрОбуч.Вс = Истина Тогда
			Если Формат(ДатаВыбора,"ДФ=ддд") = "Вс" Тогда
				СписокДат.Добавить(ДатаВыбора+(ГрОбуч.Время-'00010101'));
			КонецЕсли;
		КонецЕсли;
		
		ДатаВыбора = ДатаВыбора + (60*60*24); //1 день
		
	КонецЦикла;
	
	Возврат СписокДат;
	
КонецФункции

Функция ПолучитьУрокИТарифПоследнегоУрокаПоУченику(ГрОбуч)
	
	С = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УрокУченики.Ссылка,
	|	УрокУченики.Тариф
	|ИЗ
	|	Документ.LM_Урок.Ученики КАК УрокУченики
	|ГДЕ
	|	УрокУченики.Ссылка.Проведен = ИСТИНА
	|	И УрокУченики.Ученик = &Ученик
	|	И УрокУченики.Ссылка.ГруппаОбучения = &ГруппаОбучения
	|
	|УПОРЯДОЧИТЬ ПО
	|	УрокУченики.Ссылка.Дата УБЫВ";	
	Запрос.УстановитьПараметр("ГруппаОбучения", ГрОбуч);
	Запрос.УстановитьПараметр("Ученик", Ученик);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		С.Вставить("Ссылка",ВыборкаДетальныеЗаписи.Ссылка);
		С.Вставить("Тариф",ВыборкаДетальныеЗаписи.Тариф);
		Возврат С;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьУченикаВУроки(СтрТЗ,ШаблонСтруктура = Неопределено)
	
	СчУроков = 0;
	
	Для Каждого Д из СтрТЗ.Период Цикл 
		
		СчУроков = СчУроков + ?(ЗначениеЗаполнено(СтрТЗ.УрокРавен),1*СтрТЗ.УрокРавен,1);
		Если СтрТЗ.Урок9Скидка и СчУроков >= 9 Тогда
			Скидка = СтрТЗ.Скидка;
			СчУроков = 0;
		Иначе 
			Скидка = СтрТЗ.Скидка;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Урок.Ссылка
		|ИЗ
		|	Документ.LM_Урок КАК Урок
		|ГДЕ
		|	Урок.Дата = &Дата
		|	И Урок.Проведен = ИСТИНА
		|	И Урок.ГруппаОбучения = &ГруппаОбучения";
		Запрос.УстановитьПараметр("Дата", Д.Значение);
		Запрос.УстановитьПараметр("ГруппаОбучения", СтрТЗ.ГруппаОбучения);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Количество() > 1 Тогда
			
			Сч = Сч + 1;
			НовСтр = ТЗОписание.Добавить();
			НовСтр.Номер = Сч;
			НовСтр.Действие = СтрТЗ.Действие;
			НовСтр.Описание = "Обнаружено " +ВыборкаДетальныеЗаписи.Количество()+ " уроков ГруппыОбучения: " +СтрТЗ.ГруппаОбучения+ " на дату: " +Д.Значение+ " Операция не будет выполнена!";
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Количество() = 0 Тогда  			
			СоздатьУрок(Д.Значение,СтрТЗ,ШаблонСтруктура,Скидка);
		Иначе		
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ДобавитьВУрок(ВыборкаДетальныеЗаписи.Ссылка,СтрТЗ,ШаблонСтруктура,Скидка);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура СоздатьУрок(Дата,СтрТЗ,ШаблонСтруктура = Неопределено,Скидка = Неопределено)
	
	НовыйУрок = Документы.LM_Урок.СоздатьДокумент();
	НовыйУрок.ГруппаОбучения 	= СтрТЗ.ГруппаОбучения;
	НовыйУрок.КоличествоЧасов 	= СтрТЗ.ГруппаОбучения.Продолжительность;
	НовыйУрок.Дата 				= Дата;
	НовыйУрок.ПредметОбучения   = СтрТЗ.ГруппаОбучения.ПредметОбучения;
	НовыйУрок.Педагог		   	= СтрТЗ.ГруппаОбучения.Педагог;
	НовыйУрок.Помещение			= СтрТЗ.ГруппаОбучения.Помещение;
	
	НоваяСтрокаНовогоУрока = НовыйУрок.Ученики.Добавить();
	НоваяСтрокаНовогоУрока.Ученик 			= Ученик;
	НоваяСтрокаНовогоУрока.СписатьОплату 	= Истина;
	НоваяСтрокаНовогоУрока.Скидка			= Скидка;
	
	Если ШаблонСтруктура <> Неопределено Тогда
		НоваяСтрокаНовогоУрока.Тариф			= ШаблонСтруктура.Тариф;
	КонецЕсли;
	
	Попытка
		НовыйУрок.Записать(РежимЗаписиДокумента.Проведение);
		
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер 		= Сч;
		НовСтр.Действие 	= СтрТЗ.Действие;
		НовСтр.ДопОписание 	= "Проведено!";
		НовСтр.Урок 		= НовыйУрок.Ссылка;
		НовСтр.Описание 	= Ученик.Наименование+ ?(ЗначениеЗаполнено(Скидка),"; скидка: " +Скидка,"");
	Исключение
		
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер 		= Сч;
		НовСтр.Действие 	= СтрТЗ.Действие;
		НовСтр.ДопОписание 	= "Не проведен!";
		НовСтр.Описание 	= "Отказ! " +Ученик.Наименование+ " на дату: " +Дата+ " ГрОбуч: " +СтрТЗ.ГруппаОбучения.Наименование;
	КонецПопытки; 	
	
КонецПроцедуры

Процедура ПереместитьДеньги(СтрТЗ)
	
	ПеремещениеДенег = Документы.LM_ПеремещениеДенег.СоздатьДокумент();
	ПеремещениеДенег.Клиент 							= Ученик;
	ПеремещениеДенег.Дата 								= ТекущаяДата();
	ПеремещениеДенег.ПредметОбученияОтправитель  		= СтрТЗ.ПредметОбученияОтправитель;
	ПеремещениеДенег.ПредметОбученияПолучатель   		= СтрТЗ.ПредметОбученияПолучатель;
	ПеремещениеДенег.СделатьДвиженияПоВзаиморасчетам 	= Истина;
	ПеремещениеДенег.Сумма								= СтрТЗ.Сумма;
	
	Попытка
		ПеремещениеДенег.Записать(РежимЗаписиДокумента.Проведение);
		
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер 		= Сч;
		НовСтр.Действие 	= СтрТЗ.Действие;
		НовСтр.ДопОписание 	= "Проведено!";
		НовСтр.Урок 		= ПеремещениеДенег.Ссылка;
		НовСтр.Описание 	= Ученик.Наименование+ " с предмета обучения: " +СтрТЗ.ПредметОбученияОтправитель+ " на предмет: " +СтрТЗ.ПредметОбученияПолучатель;
	Исключение
		
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер 		= Сч;
		НовСтр.Действие 	= СтрТЗ.Действие;
		НовСтр.ДопОписание 	= "Не проведен!";
		НовСтр.Описание 	= "Отказ! " +Ученик.Наименование+ " на дату: " +ТекущаяДата();
	КонецПопытки; 	
	
КонецПроцедуры

Процедура ДобавитьВУрок(Ссылка,СтрТЗ,ШаблонСтруктура = Неопределено,Скидка = Неопределено)
	
	Док = Ссылка.ПолучитьОбъект();
	
	Если Док.Ученики.Найти(Ученик,"Ученик") = Неопределено Тогда
		НовСтр = Док.Ученики.Добавить();
		НовСтр.Ученик 			= Ученик;
		НовСтр.СписатьОплату 	= Истина;
		НовСтр.Скидка			= Скидка;
		
		Если ШаблонСтруктура <> Неопределено Тогда
			НовСтр.Тариф = ШаблонСтруктура.Тариф;
		КонецЕсли;
		
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить("Не удалось провести " +Док.Ссылка+ "! " +ОписаниеОшибки());
		КонецПопытки;
		
	Иначе
		Сч = Сч + 1;
		НовСтр = ТЗОписание.Добавить();
		НовСтр.Номер 		= Сч;
		НовСтр.Действие 	= СтрТЗ.Действие;
		НовСтр.ДопОписание 	= "Отказ!";
		НовСтр.Описание 	= "Уже присутствует ученик: " +Ученик.Наименование;
		НовСтр.Урок         = Ссылка;
		Возврат;
	КонецЕсли;
	
	Сч = Сч + 1;
	НовСтр = ТЗОписание.Добавить();
	НовСтр.Номер 		= Сч;
	НовСтр.Действие 	= СтрТЗ.Действие;
	НовСтр.ДопОписание 	= "Проведено!";
	НовСтр.Урок 		= Док.Ссылка;	
	НовСтр.Описание 	= "Добавлен ученик: " +Ученик.Наименование+ ?(ЗначениеЗаполнено(Скидка),"; скидка: " +Скидка,"");
	
КонецПроцедуры 

&НаКлиенте
Процедура АктивныеГруппыОбученияПриИзменении(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя <> "АктивныеГруппыОбученияВыб" Тогда
		Попытка
			Элемент.ТекущиеДанные.Выб = Истина;	
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗОписаниеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТЗОписаниеУрок" Тогда
		Док = Элементы.ТЗОписание.ТекущиеДанные.Урок;
		ПоказатьЗначение(,Док);
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура АктивныеГруппыОбученияПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	ТекДанные = Элементы.АктивныеГруппыОбучения.ТекущиеДанные;
//	
//	Пар = Новый Структура("СписокДат", ТекДанные.Период);
//	Пар.Вставить("ГруппаОбучения",ТекДанные.ГруппаОбучения);
//	
//	Если Элементы.АктивныеГруппыОбучения.ТекущиеДанные.Действие = "Продлить" Тогда
//		Пар.Вставить("ДатаНач",?(ЗначениеЗаполнено(Период.ДатаНачала),КонецМесяца(Период.ДатаНачала)+1,КонецМесяца(ТекущаяДата())+1));
//		Пар.Вставить("ДатаКон",?(ЗначениеЗаполнено(Период.ДатаОкончания),КонецМесяца(КонецМесяца(Период.ДатаОкончания)+1),КонецМесяца(КонецМесяца(ТекущаяДата())+1)));
//	Иначе
//		Пар.Вставить("ДатаНач",?(ЗначениеЗаполнено(Период.ДатаНачала),Период.ДатаНачала,НачалоМесяца(ТекущаяДата())));
//		Пар.Вставить("ДатаКон",?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,КонецМесяца(ТекущаяДата())));
//	КонецЕсли;
//	
//	ОткрытьФорму("Обработка.LM_ПанельУченика.Форма.ФормаВыбораПериода",Пар,ЭтотОбъект,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//	
//КонецПроцедуры

Процедура РассчитатьПериоды(ВидРасчета = Неопределено)
	
	Если ВидРасчета = Неопределено Тогда 
		ДатаНач = ?(ЗначениеЗаполнено(Период.ДатаНачала),Период.ДатаНачала,НачалоМесяца(ТекущаяДата()));
		ДатаКон = ?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,КонецМесяца(ТекущаяДата()));
	ИначеЕсли ВидРасчета = "СледующийМесяц" Тогда
	//	ДатаНач = КонецМесяца(ТекущаяДата())+1;
	//	ДатаКон = КонецМесяца(КонецМесяца(ТекущаяДата())+1);
	//Иначе
		ДатаНач = ?(ЗначениеЗаполнено(Период.ДатаНачала),КонецМесяца(Период.ДатаНачала)+1,КонецМесяца(ТекущаяДата())+1);
		ДатаКон = ?(ЗначениеЗаполнено(Период.ДатаОкончания),КонецМесяца(КонецМесяца(Период.ДатаОкончания)+1),КонецМесяца(КонецМесяца(ТекущаяДата())+1));
	КонецЕсли;
	
	Для Каждого Стр из АктивныеГруппыОбучения Цикл
		Если ЗначениеЗаполнено(Стр.ГруппаОбучения) Тогда
			Стр.Период = ВернутьМассивДатУроков(ДатаНач,ДатаКон,Стр.ГруппаОбучения);
			Стр.КолУроков = Стр.Период.Количество();
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытьФормуВыбораПериода" Тогда
		Если Параметр.Количество() > 0 Тогда
			Элементы.АктивныеГруппыОбучения.ТекущиеДанные.Период = Неопределено;
			Для Каждого Стр из Параметр Цикл
				Элементы.АктивныеГруппыОбучения.ТекущиеДанные.Период.Добавить(Стр);
				Элементы.АктивныеГруппыОбучения.ТекущиеДанные.КолУроков = Элементы.АктивныеГруппыОбучения.ТекущиеДанные.Период.Количество();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктивныеГруппыОбученияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.АктивныеГруппыОбучения.ТекущиеДанные;
	Если Поле.Имя = "АктивныеГруппыОбученияЗадолженность" Тогда
		
		Если Не ЗначениеЗаполнено(ТекДанные.ГруппаОбучения) Тогда
			Сообщить("Не выбрана ГруппаОбучения! Нельзя формировать взаиморасчеты!");
			Возврат;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(ТекДанные.ГруппаОбучения.ПредметОбучения) Тогда
		//	Сообщить("Не заполнен (не выбран) ПредметОбучения в ГруппеОбучения! Нельзя формировать взаиморасчеты!");
		//	Возврат;
		//КонецЕсли;
		
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере(ТекДанные.ГруппаОбучения);
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);	
		
	ИначеЕсли Поле.Имя = "АктивныеГруппыОбученияПериод" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекДанные = Элементы.АктивныеГруппыОбучения.ТекущиеДанные;
		
		Пар = Новый Структура("СписокДат", ТекДанные.Период);
		Пар.Вставить("ГруппаОбучения",ТекДанные.ГруппаОбучения);
		
		Если Элементы.АктивныеГруппыОбучения.ТекущиеДанные.Действие = "Продлить" Тогда
			Пар.Вставить("ДатаНач",?(ЗначениеЗаполнено(Период.ДатаНачала),КонецМесяца(Период.ДатаНачала)+1,КонецМесяца(ТекущаяДата())+1));
			Пар.Вставить("ДатаКон",?(ЗначениеЗаполнено(Период.ДатаОкончания),КонецМесяца(КонецМесяца(Период.ДатаОкончания)+1),КонецМесяца(КонецМесяца(ТекущаяДата())+1)));
		Иначе
			Пар.Вставить("ДатаНач",?(ЗначениеЗаполнено(Период.ДатаНачала),Период.ДатаНачала,НачалоМесяца(ТекущаяДата())));
			Пар.Вставить("ДатаКон",?(ЗначениеЗаполнено(Период.ДатаОкончания),Период.ДатаОкончания,КонецМесяца(ТекущаяДата())));
		КонецЕсли;
		
		ОткрытьФорму("Обработка.LM_ПанельУченика.Форма.ФормаВыбораПериода",Пар,ЭтотОбъект,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОткрытьВзаиморасчетыНаСервере(Отбор)
	
	КомпоновщикНастроек = Отчеты.LM_Взаиморасчеты.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	ОтборУченик = Новый ПолеКомпоновкиДанных("Клиент");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборУченик Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Ученик; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла;
	
	ОтборПредметОбучения = Новый ПолеКомпоновкиДанных("ПредметОбучения");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборПредметОбучения Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Отбор.ПредметОбучения; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции





