
&НаСервере
Процедура ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания)
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ДатаНачала, ДатаОкончания);
	Планировщик.ОтображатьТекущуюДату = Истина;
	       
	Элементы.Календарь.ВыделенныеДаты.Очистить();
	Если НачалоДня(ДатаНачала) <> НачалоДня(ДатаОкончания) Тогда
		Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаНачала);
		СледДата = ДатаНачала;
		Пока Истина Цикл
			СледДата = КонецДня(СледДата)+1;
			Если СледДата <= НачалоДня(ДатаОкончания) Тогда
				Элементы.Календарь.ВыделенныеДаты.Добавить(СледДата);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Элементы.Календарь.ВыделенныеДаты.Добавить(ДатаНачала);
	КонецЕсли;
	
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	Ур 	  = БиблиотекаКартинок.АктивныеПользователи;
	Напом = БиблиотекаКартинок.ВыполнитьЗадачу;
	
	Планировщик.Измерения.Очистить();
	
	/////////////////////////////////////////////////////////////////
	#Область Заполнение_Измерений
	Если НеГруппироватьПомещения = Ложь Тогда
		
		Если ОтображатьВсеПомещения Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	LM_Помещения.Ссылка КАК Помещение
			|ИЗ
			|	Справочник.LM_Помещения КАК LM_Помещения
			|ГДЕ
			|	НЕ LM_Помещения.ПометкаУдаления";
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
		Иначе 			
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	LM_Урок.Помещение КАК Помещение
			|ИЗ
			|	Документ.LM_Урок КАК LM_Урок
			|ГДЕ
			|	LM_Урок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И LM_Урок.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	LM_Урок.Помещение";	
			Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КонецЕсли;
		
		НовИзмерение = Планировщик.Измерения.Добавить("Помещение");
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Добавление Помещений в группу Помещения
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Помещение) Тогда
				НазваниеПомещения = ВыборкаДетальныеЗаписи.Помещение;
			Иначе
				НазваниеПомещения = "БезПомещения";
			КонецЕсли;
			НовЭл = НовИзмерение.Элементы.Добавить(НазваниеПомещения);
			НовЭл.Текст = НазваниеПомещения;
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Помещение.Цвет) Тогда
				НовЭл.ЦветФона = WebЦвета[СокрЛП(ВыборкаДетальныеЗаписи.Помещение.Цвет)];
			КонецЕсли;  
		КонецЦикла;

	КонецЕсли;
	#КонецОбласти
	
	
	#Область Заполнение_уроками
	
	Запрос = Новый Запрос;
	
	//Если ФильтрУченик.Пустая() Тогда
	//	Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	LM_Урок.Ссылка КАК Ссылка,
	//	|	LM_Урок.Дата КАК Дата,
	//	|	LM_Урок.КоличествоЧасов КАК КоличествоЧасов,
	//	|	LM_Урок.Педагог КАК Педагог,
	//	|	LM_Урок.Помещение КАК Помещение
	//	|ИЗ
	//	|	Документ.LM_Урок КАК LM_Урок
	//	|ГДЕ
	//	|	LM_Урок.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	//	|	И LM_Урок.Педагог = &Педагог
	//	|	И LM_Урок.Помещение = &Помещение
	//	|	И LM_Урок.ГруппаОбучения = &ГруппаОбучения
	//	|	И LM_Урок.Проведен = ИСТИНА";
	//	
	//Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	LM_Урок.Ссылка КАК Ссылка,
		|	LM_Урок.Ссылка.Дата КАК Дата,
		|	LM_Урок.Ссылка.КоличествоЧасов КАК КоличествоЧасов,
		|	LM_Урок.Ссылка.Педагог КАК Педагог,
		|	LM_Урок.Ссылка.Помещение КАК Помещение
		|ИЗ
		|	Документ.LM_Урок.Ученики КАК LM_Урок
		|ГДЕ
		|	LM_Урок.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И LM_Урок.Ссылка.ГруппаОбучения = &ГруппаОбучения
		|	И LM_Урок.Ссылка.Педагог = &Педагог
		|	И LM_Урок.Ссылка.Помещение = &Помещение
		|	И LM_Урок.Ученик = &Ученик
		|	И LM_Урок.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	LM_Урок.Ссылка,
		|	LM_Урок.Ссылка.Дата,
		|	LM_Урок.Ссылка.КоличествоЧасов,
		|	LM_Урок.Ссылка.Педагог,
		|	LM_Урок.Ссылка.Помещение";
	//КонецЕсли;
	
	Если ФильтрПедагог.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И LM_Урок.Ссылка.Педагог = &Педагог","");
	КонецЕсли;              	
	
	Если ФильтрПомещение.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И LM_Урок.Ссылка.Помещение = &Помещение","");
	КонецЕсли;
	
	Если ФильтрГруппаОбучения.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И LM_Урок.Ссылка.ГруппаОбучения = &ГруппаОбучения","");
	КонецЕсли;
	
	Если ФильтрУченик.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И LM_Урок.Ученик = &Ученик","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("Педагог", ФильтрПедагог);
	Запрос.УстановитьПараметр("Ученик", ФильтрУченик);
	Запрос.УстановитьПараметр("Помещение", ФильтрПомещение);
	Запрос.УстановитьПараметр("ГруппаОбучения", ФильтрГруппаОбучения);
	РезультатЗапроса = Запрос.Выполнить(); 	
	Уроки = РезультатЗапроса.Выбрать();
	
	Пока Уроки.Следующий() Цикл
		
		Начало  = Уроки.Дата;
		Конец   = Начало-('00010101'-Уроки.КоличествоЧасов);
		
		// Добавление новой записи в промежуток времени
		НовыйЭлемент = ЭлементыПланировщика.Добавить(Начало, Конец);
		Если ГруппаОбучения и ЗначениеЗаполнено(Уроки.Ссылка.ГруппаОбучения) Тогда
			НовыйЭлемент.Текст = НовыйЭлемент.Текст+Уроки.Ссылка.ГруппаОбучения.Наименование+"; ";
		КонецЕсли;
		Если ПредметОбучения и ЗначениеЗаполнено(Уроки.Ссылка.ПредметОбучения) Тогда
			НовыйЭлемент.Текст = НовыйЭлемент.Текст+Уроки.Ссылка.ПредметОбучения.Наименование+"; ";
		КонецЕсли;
		Если Педагог и ЗначениеЗаполнено(Уроки.Ссылка.Педагог) Тогда
			НовыйЭлемент.Текст = НовыйЭлемент.Текст+"Педагог: " +Уроки.Ссылка.Педагог.Наименование+"; ";
		КонецЕсли;
		
		Если Ученики Тогда
			НовыйЭлемент.Текст = НовыйЭлемент.Текст+"Ученики: ";
			Для Каждого СтрУченик из Уроки.Ссылка.Ученики Цикл
				НовыйЭлемент.Текст = НовыйЭлемент.Текст+СтрУченик.Ученик.Наименование+", ";
			КонецЦикла;
		КонецЕсли;
		НовыйЭлемент.Значение = Уроки.Ссылка;               		
		//НовыйЭлемент.Картинка = Ур;
		
		НовыйЭлемент.ЦветРамки = WebЦвета.ТемноСерый;
		НовыйЭлемент.ЦветФона  = WebЦвета.СеребристоСерый;
		Попытка
			Если Цвет = "Помещение" Тогда
				Если ЗначениеЗаполнено(Уроки.Ссылка.Помещение) Тогда 
					НовыйЭлемент.ЦветФона = WebЦвета[СокрЛП(Уроки.Ссылка.Помещение.Цвет)];
				КонецЕсли;
			ИначеЕсли Цвет = "ПредмОбуч" Тогда
				Если ЗначениеЗаполнено(Уроки.Ссылка.ПредметОбучения) Тогда 
					НовыйЭлемент.ЦветФона = WebЦвета[СокрЛП(Уроки.Ссылка.ПредметОбучения.Цвет)];
				КонецЕсли;
			ИначеЕсли Цвет = "Педагог" Тогда
				Если ЗначениеЗаполнено(Уроки.Ссылка.Педагог) Тогда 
					НовыйЭлемент.ЦветФона = WebЦвета[СокрЛП(Уроки.Ссылка.Педагог.Цвет)];
				КонецЕсли;
			КонецЕсли;			
		Исключение
		КонецПопытки;
		
		// Связка записей с измерениями выполняется через соответствия
		СоответствиеЗначений = Новый Соответствие;
		СоответствиеЗначений.Вставить("Помещение",	Уроки.Ссылка.Помещение);
		СоответствиеЗначений.Вставить("Педагог",	Уроки.Ссылка.Педагог);
		НовыйЭлемент.ЗначенияИзмерений	= Новый ФиксированноеСоответствие(СоответствиеЗначений); 
		
	КонецЦикла;
	#КонецОбласти	 	
	
	
	//Добавляем даты из графика Педагога
	Планировщик.ИнтервалыФона.Очистить();
	Если ЗначениеЗаполнено(ФильтрПедагог) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата КАК Дата,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала КАК ВремяНачала,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	Документ.LM_ГрафикРабочегоВремениПедагога.ТЧ КАК ГрафикРабочегоВремениПедагогаТЧ
		|ГДЕ
		|	ГрафикРабочегоВремениПедагогаТЧ.Ссылка.Проведен
		|	И ГрафикРабочегоВремениПедагогаТЧ.Ссылка.Педагог = &Педагог
		|	И ГрафикРабочегоВремениПедагогаТЧ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";	
		Запрос.УстановитьПараметр("Педагог", ФильтрПедагог);
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ДатаНачала));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ДатаОкончания));
		РезультатЗапроса = Запрос.Выполнить(); 	
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		                   		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Добавление новой записи в промежуток времени
			ВыбДатаНачала = ВыборкаДетальныеЗаписи.Дата -('00010101' - ВыборкаДетальныеЗаписи.ВремяНачала);
			ВыбДатаОкончания = ВыборкаДетальныеЗаписи.Дата -('00010101' - ВыборкаДетальныеЗаписи.ВремяОкончания);
			НовыйЭлемент = Планировщик.ИнтервалыФона.Добавить(ВыбДатаНачала, ВыбДатаОкончания);
			НовыйЭлемент.Цвет = WebЦвета.ДымчатоБелый;
		КонецЦикла;		
	КонецЕсли;
	
	
	
	Если ОтображатьНапоминания Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НапоминанияПользователя.ВремяСобытия,
		|	НапоминанияПользователя.СрокНапоминания,
		|	НапоминанияПользователя.Описание,
		|	НапоминанияПользователя.ИнтервалВремениНапоминания
		|ИЗ
		|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя";
		
		РезультатЗапроса = Запрос.Выполнить();	
		Напоминания = РезультатЗапроса.Выбрать();
		
		Пока Напоминания.Следующий() Цикл
			Начало  = Напоминания.ВремяСобытия;
			Конец   = Напоминания.ВремяСобытия+Напоминания.ИнтервалВремениНапоминания;
			
			НовыйЭлемент = ЭлементыПланировщика.Добавить(НачалоДня(Начало), КонецДня(Конец));
			НовыйЭлемент.Текст    = Напоминания.Описание;
			НовыйЭлемент.ЦветФона = WebЦвета.БледноЗолотистый;
			НовыйЭлемент.Картинка = Напом;
			
			СтруктураЗаписи = Новый Структура;
			Для Каждого Измерение Из Метаданные.РегистрыСведений.НапоминанияПользователя.Измерения Цикл
				СтруктураЗаписи.Вставить(Измерение.Имя);
			КонецЦикла;
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи,Напоминания);
			КлючЗаписи = РегистрыСведений.НапоминанияПользователя.СоздатьКлючЗаписи(СтруктураЗаписи);
			НовыйЭлемент.Значение = КлючЗаписи;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	//Если НЕ Элементы.Планировщик.ТолькоПросмотр Тогда 
	//	СтандартнаяОбработка = Ложь;
	//	
	//	//Если ТипЗнч(Элемент.ВыделенныеЭлементы[0].Значение) = Тип("ДокументСсылка.Урок") Тогда
	//	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
	//		ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение);
	//	КонецЕсли;
	//КонецЕсли;
	//Пар = Новый Структура("Ключ", Элемент.ВыделенныеЭлементы[0].Значение);
	//ОткрытьФорму("Документ.Урок.Форма.ФормаДокумента", Пар,ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);				
	//Иначе		
	//Попытка
	//КлючНапоминания = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	//ПараметрыФормы = Новый Структура;
	//ПараметрыФормы.Вставить("Ключ",КлючНапоминания);
	//ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение);
	//Исключение
	//КонецПопытки; 		
	//КонецЕсли;	
	
//КонецПроцедуры

#Region Календарь

&НаКлиенте
Процедура КалендарьПриАктивизацииДаты(Элемент)
	
	СтарыйМассив = Элементы.Календарь.ВыделенныеДаты;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(СтарыйМассив);
	СписокЗначений.СортироватьПоЗначению();
	НовыйМассив = СписокЗначений.ВыгрузитьЗначения(); 
	
	Если КалендарьПоследняяДата.Количество() = 0 Или КалендарьПоследняяДата[0].Значение <> Календарь Тогда 
		КалендарьПоследняяДата.Вставить(0,Календарь);
	КонецЕсли;
	Пока КалендарьПоследняяДата.Количество() > 2 Цикл
		КалендарьПоследняяДата.Удалить(2);
	КонецЦикла;
	
	НачалоПериода = НовыйМассив[0];
	КонецПериода = КонецДня(НовыйМассив[НовыйМассив.Количество()-1]);
	
	Если Переключатель = "День" Тогда
		ДатаНачала = НачалоДня(НачалоПериода);
		ДатаОкончания = КонецДня(КонецПериода);
	ИначеЕсли Переключатель = "Неделя" Тогда
		ДатаНачала = НачалоНедели(НачалоПериода);
		ДатаОкончания = КонецНедели(КонецПериода);
	ИначеЕсли Переключатель = "Месяц" Тогда
		ДатаНачала = НачалоМесяца(НачалоПериода);
		ДатаОкончания = КонецМесяца(КонецПериода);
	КонецЕсли; 
	
	ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого ОформлениеДаты Из ОформлениеПериода.Даты Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Дата",ОформлениеДаты.Дата);
		Если ТЗЗанятыеДаты.НайтиСтроки(Отбор).Количество()>0 Тогда //ТЗЗанятыеДаты.НайтиПоЗначению(ОформлениеДаты.Дата) <> Неопределено 
			ОформлениеДаты.ЦветФона = WebЦвета.Бирюзовый;
		КонецЕсли;
		
		//Подсвечиваем текущий день
		//Если НачалоДня(ОформлениеДаты.Дата) = НачалоДня(ТекущаяДата()) Тогда 
		//ОформлениеДаты.ЦветТекста = WebЦвета.Золотистый;
		//ОформлениеДаты.Шрифт = Новый Шрифт(,12,Истина,,Истина);
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	СформироватьСписокЗанятыхДат();
КонецПроцедуры
#EndRegion

Процедура СформироватьСписокЗанятыхДат();
	
	ТЗЗанятыеДаты.Очистить();
	
	ТЗЗ = Новый ТаблицаЗначений;
	ТЗЗ.Колонки.Добавить("Дата");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Дата КАК Дата
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	Урок.Проведен = ИСТИНА
	|	И Урок.Дата >= &ДатаНачала
	|	И Урок.Педагог = &Педагог
	|	И Урок.Помещение = &Помещение
	|	И Урок.ГруппаОбучения = &ГруппаОбучения
	|	И Урок.Дата <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Педагог", ФильтрПедагог);
	Если НЕ ЗначениеЗаполнено(ФильтрПедагог) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Урок.Педагог = &Педагог","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Помещение", ФильтрПомещение);
	Если НЕ ЗначениеЗаполнено(ФильтрПомещение) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Урок.Помещение = &Помещение","");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГруппаОбучения", ФильтрГруппаОбучения);
	Если НЕ ЗначениеЗаполнено(ФильтрГруппаОбучения) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И Урок.ГруппаОбучения = &ГруппаОбучения","");
	КонецЕсли;
	
	Если Календарь = '00010101' Тогда
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(НачалоМесяца(ТекущаяДата())-1));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(КонецМесяца(ТекущаяДата())+1)); 
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(НачалоМесяца(Календарь)-1));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(КонецМесяца(Календарь)+1)); 
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовСтр = ТЗЗ.Добавить();
		НовСтр.Дата = НачалоДня(ВыборкаДетальныеЗаписи.Дата);
	КонецЦикла; 	 	
	
	ТЗЗ.Свернуть("Дата");
	ТЗЗанятыеДаты.Загрузить(ТЗЗ);
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ПоложениеШкалыВремениТекст) Тогда
		ПоложениеШкалыВремениТекст = "Лево"; 	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяКалендаряС) или Не ЗначениеЗаполнено(ВремяКалендаряПо) Тогда
		ВремяКалендаряС = 8;  // 8 с 8:00 (00:00 + 8 часов = 8:00)
		ВремяКалендаряПо = 20; // 4 до 20:00 (00:00 - 4 часа = 20:00)
	КонецЕсли;
		
	//Если Переключатель = "День" Тогда 
	//	Элементы.Календарь.НачалоПериодаОтображения = НачалоДня(ТекущаяДата());		
	//	Элементы.Календарь.КонецПериодаОтображения = КонецДня(ТекущаяДата());
	//ИначеЕсли Переключатель = "Неделя" Тогда 
	//	Элементы.Календарь.НачалоПериодаОтображения = НачалоНедели(ТекущаяДата());		
	//	Элементы.Календарь.КонецПериодаОтображения = НачалоНедели(ТекущаяДата());
	//ИначеЕсли Переключатель = "Месяц" Тогда 
	//	Элементы.Календарь.НачалоПериодаОтображения = НачалоМесяца(ТекущаяДата());		
	//	Элементы.Календарь.КонецПериодаОтображения = НачалоМесяца(ТекущаяДата());
	//КонецЕсли; 
	#Если ВебКлиент Тогда
		Элементы.Планировщик.ТолькоПросмотр = Истина;
	#КонецЕсли 	
			
	СформироватьСписокЗанятыхДат();
	ЗаполнитьНаКлиенте(Неопределено, Неопределено);
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаКлиенте(ДатаНач = Неопределено, ДатаОконч = Неопределено)
	
	СформироватьСписокЗанятыхДат();
	
	Элементы.Календарь.ВыделенныеДаты.Очистить();	
	Если ДатаНач <> Неопределено Тогда 
		ДатаНачала = ДатаНач;
		ДатаОкончания = ДатаОконч;
	ИначеЕсли Календарь = '00010101' Тогда
		ДатаНачала = ТекущаяДата();
		ДатаОкончания = ТекущаяДата();
	Иначе
		ДатаНачала = Календарь;
		ДатаОкончания = Календарь;
		Элементы.Календарь.ВыделенныеДаты.Добавить(Календарь);
	КонецЕсли;
	
	Планировщик.ОтступСНачалаПереносаШкалыВремени = ВремяКалендаряС; // 8 с 8:00 (00:00 + 8 часов = 8:00)
	Планировщик.ОтступСКонцаПереносаШкалыВремени = 24-ВремяКалендаряПо;// 4 до 20:00 (00:00 - 4 часа = 20:00)
	
	Если Переключатель = "День" Тогда
		ДатаНачала = НачалоДня(ДатаНачала);
		ДатаОкончания = КонецДня(ДатаОкончания);
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 48;
		//Планировщик.ОтступСНачалаПереносаШкалыВремени = 8;
		//Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		//Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Если ПоложениеШкалыВремениТекст = "Лево" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Верх" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Низ" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Низ;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Право" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Право;
		КонецЕсли; 
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 30;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Минута; 		
	ИначеЕсли Переключатель = "Неделя" Тогда
		ДатаНачала = НачалоНедели(ДатаНачала);
		ДатаОкончания = КонецНедели(ДатаОкончания);
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		//Планировщик.ОтступСНачалаПереносаШкалыВремени = 8;
		//Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		//Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Если ПоложениеШкалыВремениТекст = "Лево" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Верх" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Низ" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Низ;
		ИначеЕсли ПоложениеШкалыВремениТекст = "Право" Тогда
			Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Право;
		КонецЕсли; 
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 30;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Минута;
	ИначеЕсли Переключатель = "Месяц" Тогда
		ДатаНачала = НачалоМесяца(ДатаНачала);
		ДатаОкончания = КонецМесяца(ДатаОкончания);
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		//Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаНачала), КонецМесяца(ДатаОкончания));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		//Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
		//	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		//	Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
		//	Интервал.Цвет = Новый Цвет(223, 255, 223);
		//КонецЕсли; 
		
	КонецЕсли;   
	
	ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dd MMMM yyy (дддд)'";
	Переключатель = "День";
	Цвет		  = "ПредмОбуч";
	
	//Если НЕ РольДоступна("ПолныеПрава") Тогда 
	//	Элементы.Планировщик.ТолькоПросмотр = Истина;
	//КонецЕсли;  
	     	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПриИзменении(Элемент)
	Если Переключатель = "День" Тогда
		ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, КонецДня(Планировщик.ТекущиеПериодыОтображения[0].Начало));
	ИначеЕсли Переключатель = "Месяц" Тогда
		ЗаполнитьНаКлиенте(НачалоМесяца(Планировщик.ТекущиеПериодыОтображения[0].Начало), КонецМесяца(Планировщик.ТекущиеПериодыОтображения[0].Начало));
	ИначеЕсли Переключатель = "Неделя" Тогда
		Если ТекущаяДата()>=Планировщик.ТекущиеПериодыОтображения[0].Начало и ТекущаяДата()<=Планировщик.ТекущиеПериодыОтображения[0].Конец Тогда
			ЗаполнитьНаКлиенте(НачалоНедели(ТекущаяДата()), КонецНедели(ТекущаяДата()));
		Иначе
			ЗаполнитьНаКлиенте(НачалоНедели(Планировщик.ТекущиеПериодыОтображения[0].Начало), КонецНедели(Планировщик.ТекущиеПериодыОтображения[0].Начало));
		КонецЕсли;
	Иначе 		
		ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, Планировщик.ТекущиеПериодыОтображения[0].Конец);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Цвет1ПриИзменении(Элемент)
	ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, Планировщик.ТекущиеПериодыОтображения[0].Конец);
КонецПроцедуры




////////////////Управление периодами планировщика//////////////////////////////////
&НаКлиенте
Процедура ПредыдущийПериод(Команда)
	
	НачалоПериода = НачалоДня(Планировщик.ТекущиеПериодыОтображения[0].Начало);
	//КонецПериода = ТекущиеПериодыОтображения[0].Начало;
	
	Если Переключатель = "День" Тогда
		ДатаНачала = НачалоДня(НачалоПериода-1);
		ДатаОкончания = КонецДня(НачалоПериода-1);
	ИначеЕсли Переключатель = "Неделя" Тогда
		ДатаНачала = НачалоНедели(НачалоПериода-1);
		ДатаОкончания = КонецНедели(НачалоПериода-1);
	ИначеЕсли Переключатель = "Месяц" Тогда
		ДатаНачала = НачалоМесяца(НачалоПериода-1);
		ДатаОкончания = КонецМесяца(НачалоПериода-1);
	КонецЕсли; 
	
	ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	Элементы.Календарь.Обновить();	
	
КонецПроцедуры

&НаКлиенте
Процедура БудущийПериод(Команда)
	
	НачалоПериода = КонецДня(Планировщик.ТекущиеПериодыОтображения[0].Конец);
	
	Если Переключатель = "День" Тогда
		ДатаНачала = НачалоДня(НачалоПериода+1);
		ДатаОкончания = КонецДня(НачалоПериода+1);
	ИначеЕсли Переключатель = "Неделя" Тогда
		ДатаНачала = НачалоНедели(НачалоПериода+1);
		ДатаОкончания = КонецНедели(НачалоПериода+1);
	ИначеЕсли Переключатель = "Месяц" Тогда
		ДатаНачала = НачалоМесяца(НачалоПериода+1);
		ДатаОкончания = КонецМесяца(НачалоПериода+1);
	КонецЕсли; 
	
	ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	Элементы.Календарь.Обновить();		
	
КонецПроцедуры

&НаКлиенте
Процедура Сегодня(Команда)
	
	НачалоПериода = НачалоДня(ТекущаяДата());
	
	Если Переключатель = "День" Тогда
		ДатаНачала = НачалоДня(НачалоПериода);
		ДатаОкончания = КонецДня(НачалоПериода);
	ИначеЕсли Переключатель = "Неделя" Тогда
		ДатаНачала = НачалоНедели(НачалоПериода);
		ДатаОкончания = КонецНедели(НачалоПериода);
	ИначеЕсли Переключатель = "Месяц" Тогда
		ДатаНачала = НачалоМесяца(НачалоПериода);
		ДатаОкончания = КонецМесяца(НачалоПериода);
	КонецЕсли; 
	
	ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимость()
	Если СкрытьНастройки Тогда
		Элементы.Группа3.Видимость = Ложь;
	Иначе
		Элементы.Группа3.Видимость = Истина;
	КонецЕсли;	
КонецПроцедуры



#Region КомандыПланировщика

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Значения.Количество() = 1 Тогда
		Пом = Значения.Получить("Помещение");
	Иначе
		Пом = ФильтрПомещение;
	КонецЕсли;
		
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Вопрос("Создать новый Урок с " +Формат(Начало,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " до " +Формат(Конец,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ 
	?(Строка(Пом)<>""," помещение: " +Пом+ " ?"," ?"), Режим, 0);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Документ.LM_Урок.Форма.ФормаДокумента");
	Форма.Объект.Дата = Начало;
	Форма.Объект.КоличествоЧасов = '00010101' - (Начало - Конец);
	
	Если ЗначениеЗаполнено(ФильтрГруппаОбучения) Тогда
		Форма.Объект.ГруппаОбучения = ФильтрГруппаОбучения;
		Форма.Объект.Педагог = ФильтрГруппаОбучения.Педагог;
		Форма.Объект.СтавкаПедагога = ФильтрГруппаОбучения.Педагог.СтавкаПедагога;
		Форма.Объект.ПредметОбучения = ФильтрГруппаОбучения.ПредметОбучения;
		Форма.Объект.Помещение = Пом;
	Иначе
		Если НЕ ФильтрПедагог.Пустая() Тогда
			Форма.Объект.Педагог = ФильтрПедагог;
			Форма.Объект.СтавкаПедагога = ФильтрПедагог.СтавкаПедагога;
		КонецЕсли;
		Форма.Объект.Помещение = Пом;
	КонецЕсли;

	Форма.Открыть();
	
	ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, Планировщик.ТекущиеПериодыОтображения[0].Конец);
	//ОткрытьФорму("Документ.Урок.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);


	//Если НЕ Элементы.Планировщик.ТолькоПросмотр Тогда
	//	//ПараметрыФормы = Новый Структура;
	//	//ПараметрыФормы.Вставить("Дата",Начало);
	//	//ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//	Форма = ПолучитьФорму("Документ.LM_Урок.Форма.ФормаДокумента");
	//	Форма.Объект.Дата = Начало;
	//	Форма.Открыть();
	//	//ОткрытьФорму("Документ.Урок.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	СтруктураДействий = ДействиеСДокументом(); 
	
	Если СтруктураДействий <> Неопределено Тогда
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Ответ = Вопрос(СтруктураДействий.Действие, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, Планировщик.ТекущиеПериодыОтображения[0].Конец);
			Возврат;
		КонецЕсли;
		
		Если ИзменитьДокумент(СтруктураДействий) Тогда
			ЗаполнитьНаКлиенте(Планировщик.ТекущиеПериодыОтображения[0].Начало, Планировщик.ТекущиеПериодыОтображения[0].Конец);
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры
Функция ДействиеСДокументом()

	С = Новый Структура;
	
	ТекДанные = Элементы.Планировщик.ВыделенныеЭлементы;
	
	Если ТекДанные.Количество() = 1 Тогда
		
		Док = ТекДанные[0].Значение;
		     		
		Если ТекДанные[0].ЗначенияИзмерений.Количество() = 1 Тогда
			
			Если ТекДанные[0].Значение.Дата <> ТекДанные[0].Начало
				и ТекДанные[0].Значение.Окончание <> ТекДанные[0].Конец Тогда
				//Это смена помещения и перенос
				С.Вставить("Действие","Сменить помещение " +ТекДанные[0].Значение.Помещение+ " на " +ТекДанные[0].ЗначенияИзмерений.Получить("Помещение")+ Символы.ПС 
				+"и перенести по времени с " +Символы.ПС
				+Формат(ТекДанные[0].Значение.Дата,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " - " +Формат(ТекДанные[0].Значение.Окончание,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " на " +Символы.ПС
				+Формат(ТекДанные[0].Начало,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " - " +Формат(ТекДанные[0].Конец,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ Символы.ПС +ТекДанные[0].Значение+ " ?");
				С.Вставить("Помещение",ТекДанные[0].ЗначенияИзмерений.Получить("Помещение"));    
				С.Вставить("Дата",ТекДанные[0].Начало);
				С.Вставить("Окончание",ТекДанные[0].Конец);
				С.Вставить("Документ",ТекДанные[0].Значение);
				Возврат С;

			КонецЕсли;
			
			//Это смена Помещения
			С.Вставить("Действие","Сменить помещение " +ТекДанные[0].Значение.Помещение+ " на " +ТекДанные[0].ЗначенияИзмерений.Получить("Помещение")+ Символы.ПС +ТекДанные[0].Значение+ " ?");
			С.Вставить("Помещение",ТекДанные[0].ЗначенияИзмерений.Получить("Помещение"));
			С.Вставить("Дата",ТекДанные[0].Значение.Дата);
			С.Вставить("Окончание",ТекДанные[0].Значение.Окончание);
			С.Вставить("Документ",ТекДанные[0].Значение);
			Возврат С;
			
		Иначе
			
			Если ТекДанные[0].Значение.Дата <> ТекДанные[0].Начало
				или ТекДанные[0].Значение.Окончание <> ТекДанные[0].Конец Тогда
				
				//Это перенос
				С.Вставить("Действие","Перенести по времени с " +Символы.ПС
				+Формат(ТекДанные[0].Значение.Дата,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " - " +Формат(ТекДанные[0].Значение.Окончание,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " на " +Символы.ПС
				+Формат(ТекДанные[0].Начало,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ " - " +Формат(ТекДанные[0].Конец,"ДФ='дд.ММ.гг (ЧЧ:мм)'")+ Символы.ПС +ТекДанные[0].Значение+ " ?");
				С.Вставить("Помещение",ТекДанные[0].Значение.Помещение);
				С.Вставить("Дата",ТекДанные[0].Начало);
				С.Вставить("Окончание",ТекДанные[0].Конец);
				С.Вставить("Документ",ТекДанные[0].Значение);
				Возврат С;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции
Функция ИзменитьДокумент(СтруктураДействий)
	
	Об = СтруктураДействий.Документ.ПолучитьОбъект();
	
	Об.Дата = СтруктураДействий.Дата;
	//Об.Окончание = СтруктураДействий.Окончание;
	Об.КоличествоЧасов = '00010101' + (СтруктураДействий.Окончание - СтруктураДействий.Дата);
	Об.Помещение = СтруктураДействий.Помещение;
	
	Попытка
		Об.Записать(РежимЗаписиДокумента.Запись);
		Возврат Истина;
	Исключение
		Сообщить("Не записался " +СтруктураДействий.Документ+ " " +ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;

КонецФункции

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	Если НЕ Элементы.Планировщик.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//НачалоПериода = ТекущиеПериодыОтображения[0].Начало;
	//КонецПериода = ТекущиеПериодыОтображения[0].Начало;//ТекущиеПериодыОтображения[0].Конец;
	
	//Если Переключатель = "День" Тогда
	//	ДатаНачала = НачалоДня(ТекущиеПериодыОтображения[0].Начало);
	//	ДатаОкончания = КонецДня(ТекущиеПериодыОтображения[0].Начало);
	//ИначеЕсли Переключатель = "Неделя" Тогда
	//	ДатаНачала = НачалоНедели(ТекущиеПериодыОтображения[0].Начало);
	//	ДатаОкончания = КонецНедели(ТекущиеПериодыОтображения[0].Начало);
	//ИначеЕсли Переключатель = "Месяц" Тогда
	//	ДатаНачала = НачалоМесяца(НачалоПериода);
	//	ДатаОкончания = КонецМесяца(КонецПериода);
	//КонецЕсли; 
	
	//ЗаполнитьНаСервере(ДатаНачала,ДатаОкончания);
	//Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	Если НЕ Элементы.Планировщик.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;       	
		ПоказатьЗначение(,Элемент.ВыделенныеЭлементы[0].Значение);
	КонецЕсли;
	
КонецПроцедуры

#EndRegion


&НаКлиенте
Процедура СкрытьНастройкиПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры
