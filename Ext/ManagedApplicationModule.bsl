
// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы


#Область ОбработчикиСобытий

Процедура ПередНачаломРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередНачаломРаботыСистемы();
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы 	
		
	LMНастроки = LM.ПолучитьНастройки();
	Если LMНастроки.Свойство("ИспользоватьОповещения") и LMНастроки.ИспользоватьОповещения Тогда
		ПодключитьОбработчикОжидания("LM_ОбработчикОповещения", ?(LMНастроки.ПериодОповещения=0,300,LMНастроки.ПериодОповещения));
	КонецЕсли;
	
КонецПроцедуры

Процедура LM_ОбработчикОповещения() Экспорт
	
	Оповещения = LM.ПолучитьОповещения();
	
	Если Оповещения.Количество() > 0 Тогда
		
		Для Каждого Оп из Оповещения Цикл
			
			//ОткрытьФорму("РегистрСведений.LM_Оповещения.ФормаЗаписи", Новый Структура("Ключ",Оп.КлючЗаписи), , Истина); 			
			ПоказатьОповещениеПользователя(Оп.Описание, ПолучитьНавигационнуюСсылку(Оп.КлючЗаписи), Оп.Источник, БиблиотекаКартинок.ДиалогИнформация, СтатусОповещенияПользователя.Важное);
		КонецЦикла;
		
	КонецЕсли;  	
	
КонецПроцедуры

Процедура ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения)
	
	// СтандартныеПодсистемы
	СтандартныеПодсистемыКлиент.ПередЗавершениемРаботыСистемы(Отказ, ТекстПредупреждения);
	// Конец СтандартныеПодсистемы
	
КонецПроцедуры

Функция ПроверкаНеобходимостиОбновления()
	
	Возврат Ложь;
	
КонецФункции
#КонецОбласти