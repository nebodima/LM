&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьКартинки();
		
		//ДокументыДвижения2.Отбор.Элементы.Очистить();	
		//ДокументыДвижения2.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		//ЭлементОтбора = ДокументыДвижения2.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ученик");
		//ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = Объект.Ссылка;
		//ЭлементОтбора = ДокументыДвижения2.Отбор.Элементы[0];
		//ЭлементОтбора.Использование = Истина;
		//Элементы.ДокументыДвижения2.Обновить();
		
		ЗаполнитьТЗДокументы();
		ЗаполнитьДетьми();
	Иначе
		Попытка
			Объект.Фамилия 	= Параметры.Ключ2.Фамилия;
		Исключение
		КонецПопытки;
		Попытка
			Объект.Имя 		= Параметры.Ключ2.Имя;
		Исключение
		КонецПопытки;
		Попытка
			Объект.Отчество = Параметры.Ключ2.Отчество;
		Исключение
		КонецПопытки;
		Попытка
			Объект.Родитель = Справочники.LM_ФизЛица[Параметры.Ключ2.Группа];
		Исключение
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Фото) и ЗначениеЗаполнено(Фото) Тогда
		НовыйФайлКартинки = Справочники.LM_Фото.СоздатьЭлемент();
		НовыйФайлКартинки.Файл = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Фото));
		НовыйФайлКартинки.Наименование = ТекущийОбъект.Наименование;
		НовыйФайлКартинки.Записать();
		ТекущийОбъект.Фото = НовыйФайлКартинки.Ссылка;
	КонецЕсли;  
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗДокументы()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДвижения.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УрокУченики.Ссылка КАК Ссылка,
		|	УрокУченики.Сумма КАК Сумма,
		|	УрокУченики.Ссылка.КоличествоЧасов КАК Часы,
		|	УрокУченики.Тариф КАК Тариф,
		|	УрокУченики.Ссылка.ПредметОбучения КАК ПредметОбучения,
		|	УрокУченики.Ссылка.Дата КАК Дата,
		|	NULL КАК Клиент
		|ИЗ
		|	Документ.LM_Урок.Ученики КАК УрокУченики
		|ГДЕ
		|	УрокУченики.Ученик = &ФизЛицо
		|	И УрокУченики.Ссылка.Проведен = ИСТИНА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПКО.Ссылка,
		|	ПКО.СуммаДокумента,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ПКО.Дата,
		|	NULL
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПКО
		|ГДЕ
		|	ПКО.Проведен = ИСТИНА
		|	И ПКО.LM_ФизЛицо = &ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Урок.Ссылка,
		|	Урок.Сумма,
		|	Урок.КоличествоЧасов,
		|	NULL,
		|	Урок.ПредметОбучения,
		|	Урок.Дата,
		|	NULL
		|ИЗ
		|	Документ.LM_Урок КАК Урок
		|ГДЕ
		|	Урок.Проведен = ИСТИНА
		|	И Урок.Педагог = &ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РКО.Ссылка,
		|	РКО.СуммаДокумента,
		|	NULL,
		|	NULL,
		|	NULL,
		|	РКО.Дата,
		|	NULL
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК РКО
		|ГДЕ
		|	РКО.Проведен = ИСТИНА
		|	И РКО.LM_ФизЛицо = &ФизЛицо
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	LM_ДополнительныеРасходыРасходы.Ссылка,
		|	LM_ДополнительныеРасходыРасходы.Сумма,
		|	LM_ДополнительныеРасходыРасходы.Часы,
		|	LM_ДополнительныеРасходыРасходы.Тариф,
		|	LM_ДополнительныеРасходыРасходы.ПредметОбучения,
		|	NULL,
		|	LM_ДополнительныеРасходыРасходы.Клиент
		|ИЗ
		|	Документ.LM_ДополнительныеРасходы.Расходы КАК LM_ДополнительныеРасходыРасходы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	LM_НачислениеБонусовДисконтныеКарты.Ссылка.Ссылка,
		|	LM_НачислениеБонусовДисконтныеКарты.СуммаБонусов,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	LM_НачислениеБонусовДисконтныеКарты.ДисконтнаяКарта.Владелец
		|ИЗ
		|	Документ.LM_НачислениеБонусов.ДисконтныеКарты КАК LM_НачислениеБонусовДисконтныеКарты";
	
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Сортировать("Дата");
	
	Сч=0;
	Для Каждого ВыборкаДетальныеЗаписи из РезультатЗапроса Цикл
		СтрДок = ДокументыДвижения.Добавить();
		Сч = Сч + 1;
		СтрДок.Сч 		= Сч;
		СтрДок.Документ = ВыборкаДетальныеЗаписи.Ссылка;
		СтрДок.Сумма 	= ВыборкаДетальныеЗаписи.Сумма;
		СтрДок.Часы 	= ВыборкаДетальныеЗаписи.Часы;
		СтрДок.Тариф 	= ВыборкаДетальныеЗаписи.Тариф;
		СтрДок.Предмет 	= ВыборкаДетальныеЗаписи.ПредметОбучения;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДетьми()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Дети.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизЛица.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.LM_ФизЛица КАК ФизЛица
		|ГДЕ
		|	ФизЛица.ПометкаУдаления = ЛОЖЬ
		|	И ФизЛица.Родитель1 = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", Объект.Ссылка);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДети = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДети.Следующий() Цикл
		СтрДок = Дети.Добавить();
		СтрДок.Значение = ВыборкаДети.Ссылка;
	КонецЦикла;	

КонецПроцедуры



//Работа с фото
&НаСервере
Процедура ПоказатьКартинки()
	
	Попытка
		Фото = ПоместитьВоВременноеХранилище(Объект.Фото.Файл.Получить());
	Исключение 
		Фото = "";
	КонецПопытки;;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФото(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла",ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение,,,Истина,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Фото = Адрес;
	Объект.Фото = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ФотоОбъектОчистка(Элемент, СтандартнаяОбработка)
	Фото = Неопределено; 
КонецПроцедуры

&НаКлиенте
Процедура ФотоПриИзменении(Элемент) 	
	ПоказатьКартинки();
КонецПроцедуры
//Конец Работа с фото



//Расчет возраста
&НаКлиенте 
Процедура ДатаРожденияПриИзменении(Элемент)
	
	РассчитатьВозраст();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВозраст()
	
	Если ЗначениеЗаполнено(Объект.ДатаРождения) Тогда
		//Объект.Возраст = Цел((ТекущаяДата()- Объект.ДатаРождения)/60/60/24/365); //Годы
		
		Объект.Возраст = Год(ТекущаяДата()) - Год(Объект.ДатаРождения) 
                    - ?(Месяц(ТекущаяДата()) < Месяц(Объект.ДатаРождения) 
                        Или Месяц(ТекущаяДата()) = Месяц(Объект.ДатаРождения) И День(ТекущаяДата()) < День(Объект.ДатаРождения), 
                         1, 0);
	Иначе                          
		Объект.Возраст = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
//Конец расчет возраста


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Оповестить(Объект.Ссылка);
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура ДекорацияСсылкаVKНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Объект.VK) Тогда
		ПерейтиПоНавигационнойСсылке(Объект.VK);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	        	
	Объект.Наименование = СокрЛП(Объект.Фамилия)+	?(ПустаяСтрока(Объект.Имя),""," " +Объект.Имя)+ ?(ПустаяСтрока(Объект.Отчество),""," " +Объект.Отчество);
	
КонецПроцедуры


&НаКлиенте
Процедура РодительСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтроки = Новый Структура;
	
	Назв = СокрЛП(Элемент.ТекстРедактирования);
	
	Если Найти(Назв," ") > 0 Тогда
		Симв1 = Найти(Назв," ");
		ПараметрыСтроки.Вставить("Фамилия",Лев(Назв,Симв1-1));
		Назв = СокрЛП(Сред(Назв,Симв1+1));
	Иначе
		ПараметрыСтроки.Вставить("Фамилия",Назв);
		Назв = "";
	КонецЕсли;
	          	
	Если (Найти(Назв," ") > 0) и (СтрДлина(Назв) > 0) Тогда
		Симв2 = Найти(Назв," ");
		ПараметрыСтроки.Вставить("Имя",Лев(Назв,Симв2-1));
		Назв = СокрЛП(Сред(Назв,Симв2+1));
	Иначе
		ПараметрыСтроки.Вставить("Имя",Назв);
		Назв = "";
	КонецЕсли;
	                        	
	Если СтрДлина(Назв) > 0 Тогда
		ПараметрыСтроки.Вставить("Отчество",Назв);
	КонецЕсли;
	
	ПараметрыСтроки.Вставить("Группа","Родители");
	
	Пар = Новый Структура("Ключ2", ПараметрыСтроки);
	
	ОткрытьФорму("Справочник.LM_ФизЛица.Форма.ФормаЭлемента",Пар,ЭтотОбъект,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Функция ОткрытьВзаиморасчетыНаСервере()
	
	КомпоновщикНастроек = Отчеты.LM_Взаиморасчеты.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")); 
	//ЭлементНастройки.Значение.ДатаНачала    = '00010101';//НачалоГода(ТекущаяДата());
	//ЭлементНастройки.Значение.ДатаОкончания = '00010101';//КонецГода(ТекущаяДата());
	Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
		ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
		Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
			//ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
			ПользовательскийПараметр.Использование = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	ОтборУченик = Новый ПолеКомпоновкиДанных("Клиент");
	//ОтборПериод = Новый ПолеКомпоновкиДанных("Период");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборУченик Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Объект.Ссылка; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВзаиморасчеты(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере();
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	Иначе
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

/////Цвет
&НаКлиенте
Процедура ПриНажатииКнопкиВыборЦвета(Команда)
	
	Кнопка = ЭтаФорма.ТекущийЭлемент;
	
	Обработчик = Новый ОписаниеОповещения("ПриВыбореWebЦвета", ЭтаФорма);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ДопПарам = Новый Структура("ИмяКнопки", Кнопка.Имя);
	
	//Форма текущей демо обработки
	ОткрытьФорму("Обработка.LM_ВыборWebЦвета.Форма.ПалитраWebЦветовУправляемая", ДопПарам,,,,, Обработчик, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореWebЦвета(ВыбраныйWebЦвет, ДополнительныеПараметры) Экспорт
	
	//Обработка выбора цветв
	Если НЕ ВыбраныйWebЦвет = Неопределено Тогда
		ИмяКнопки = ЭтаФорма.ТекущийЭлемент.Имя;
		Элементы[ИмяКнопки].ЦветФона  = ВыбраныйWebЦвет;
		Элементы[ИмяКнопки].Заголовок = ВыбраныйWebЦвет;
		Попытка
			ВыбЦвет = Сред(ВыбраныйWebЦвет,0,Найти(ВыбраныйWebЦвет,"(")-2);
			ВыбЦвет = СтрЗаменить(ВыбЦвет,"-","");
			ВыбЦвет = СтрЗаменить(ВыбЦвет," ","");
			Объект.Цвет = ВыбЦвет;
		Исключение
			Объект.Цвет = ВыбраныйWebЦвет; 
		КонецПопытки;
	КонецЕсли; 
	
КонецПроцедуры
/////Цвет

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.Цвет) Тогда
		Попытка
			Элементы.ПриНажатииКнопкиВыборЦвета.ЦветФона = WebЦвета[Объект.Цвет];
			Элементы.ПриНажатииКнопкиВыборЦвета.Заголовок = WebЦвета[Объект.Цвет];
		Исключение
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозрастПриИзменении(Элемент)
	Объект.ДатаРождения = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВзаиморасчеты и НЕ Объект.Ссылка.Пустая() Тогда
		ЗаполнитьДиаграмму();
	КонецЕсли; 	
КонецПроцедуры
Процедура ЗаполнитьДиаграмму()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	-LM_СписанияСуммЗаУрокиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	-LM_СписанияСуммЗаУрокиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	LM_СписанияСуммЗаУрокиОстаткиИОбороты.Регистратор КАК Регистратор,
	|	LM_СписанияСуммЗаУрокиОстаткиИОбороты.Регистратор.Дата КАК РегистраторДата
	|ИЗ
	|	РегистрНакопления.LM_СписанияСуммЗаУроки.ОстаткиИОбороты(, , Авто, , ) КАК LM_СписанияСуммЗаУрокиОстаткиИОбороты
	|ГДЕ
	|	LM_СписанияСуммЗаУрокиОстаткиИОбороты.Клиент = &Клиент";
	Запрос.УстановитьПараметр("Клиент", Объект.Ссылка);  	
	РезультатЗапроса = Запрос.Выполнить();    	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Вставить обработку выборки ВыборкаДетальныеЗаписи
	КонецЦикла;
	
	
КонецПроцедуры

