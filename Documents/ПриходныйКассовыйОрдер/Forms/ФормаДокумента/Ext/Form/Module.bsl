&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда		
		ЗаполнитьЗначенияСвойств(Объект,Параметры.ЗначенияЗаполнения); 		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		с = РассчитатьОстатокБонусовНаСервере();
		Если с <> Неопределено Тогда
			ДоступноБонусов = с.СуммаБонусовОстаток;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлиентПриИзмененииНаСервере()
	
	Объект.Родитель = Неопределено;
	
	Попытка
		Если ЗначениеЗаполнено(Объект.Контрагент.Родитель1) Тогда
			Объект.Родитель = Объект.Контрагент.Родитель1;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	КлиентПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ОпределитьСписокУроков(СписокУроков)
	
	СуммаПриход = 0;
	
	Если ЗначениеЗаполнено(Объект.ПредметОбучения) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПКО.СуммаДокумента) КАК Сумма
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПКО
		|ГДЕ
		|	ПКО.Проведен = ИСТИНА
		|	И ПКО.Контрагент = &Ученик
		|	И ПКО.ПредметОбучения = &ПредметОбучения";
		Запрос.УстановитьПараметр("ПредметОбучения", Объект.ПредметОбучения);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ПКО.СуммаДокумента) КАК Сумма
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ПКО
		|ГДЕ
		|	ПКО.Проведен = ИСТИНА
		|	И ПКО.Контрагент = &Ученик";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ученик", Объект.Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Сумма <> Null Тогда
			СуммаПриход = ВыборкаДетальныеЗаписи.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если ЗначениеЗаполнено(Объект.ПредметОбучения) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УрокУченики.Ссылка КАК Ссылка,
		|	УрокУченики.Сумма,
		|	УрокУченики.Часы
		|ИЗ
		|	Документ.LM_Урок.Ученики КАК УрокУченики
		|ГДЕ
		|	УрокУченики.Ссылка.Проведен = ИСТИНА
		|	И УрокУченики.Ученик = &Ученик
		|	И УрокУченики.Ссылка.ПредметОбучения = &ПредметОбучения
		|	И УрокУченики.СписатьОплату = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
		Запрос.УстановитьПараметр("ПредметОбучения", Объект.ПредметОбучения);
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УрокУченики.Ссылка КАК Ссылка,
		|	УрокУченики.Сумма,
		|	УрокУченики.Часы
		|ИЗ
		|	Документ.LM_Урок.Ученики КАК УрокУченики
		|ГДЕ
		|	УрокУченики.Ссылка.Проведен = ИСТИНА
		|	И УрокУченики.Ученик = &Ученик
		|	И УрокУченики.СписатьОплату = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ученик", Объект.Контрагент);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Счетчик = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.Сумма <> Null Тогда
			Счетчик = Счетчик + ВыборкаДетальныеЗаписи.Сумма;
			
			Если Счетчик > СуммаПриход Тогда
				СписокУроков = СписокУроков + Формат(ВыборкаДетальныеЗаписи.Ссылка.Дата,"ДФ='дд.ММ.гггг ЧЧ:мм'")+ ", ";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 	
	
	Возврат СписокУроков;
	
КонецФункции

&НаКлиенте
Процедура СформироватьТекстНазначенияПлатежа(Команда)
	
	СписокУроков = "";
	СписокУроков = ОпределитьСписокУроков(СписокУроков);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.НазначениеПлатежа = "Оплата за ученика: " +Объект.Контрагент+ 
		?(ЗначениеЗаполнено(Объект.ПредметОбучения),", за предмет: " +Объект.ПредметОбучения,"")+ 
		?(СписокУроков<>"",", за уроки: " +СписокУроков,"");
	КонецЕсли;

КонецПроцедуры     

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Попытка
		Если ЗначениеЗаполнено(Объект.Подразделение.Организация) Тогда
			Объект.Организация = Объект.Подразделение.Организация;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры   

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция РассчитатьЗадолженностьНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ПредметОбучения) Тогда 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	-СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.СуммаОстаток < 0
		|	И СписанияСуммЗаУрокиОстатки.ПредметОбучения = &ПредметОбучения";
		Запрос.УстановитьПараметр("ПредметОбучения", Объект.ПредметОбучения);
		Запрос.УстановитьПараметр("Клиент", Объект.Контрагент);
		
	Иначе 		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	-СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.СуммаОстаток < 0";	
		Запрос.УстановитьПараметр("Клиент", Объект.Контрагент);		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьЗадолженность(Команда)
	
	Объект.СуммаДокумента = РассчитатьЗадолженностьНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ОткрытьВзаиморасчетыНаСервере()
	
	КомпоновщикНастроек = Отчеты.LM_Взаиморасчеты.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")); 
	//ЭлементНастройки.Значение.ДатаНачала    = '00010101';//НачалоГода(ТекущаяДата());
	//ЭлементНастройки.Значение.ДатаОкончания = '00010101';//КонецГода(ТекущаяДата());
	Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
		ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
		Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
			//ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
			ПользовательскийПараметр.Использование = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	ОтборУченик = Новый ПолеКомпоновкиДанных("Клиент");
	ОтборТариф = Новый ПолеКомпоновкиДанных("Тариф");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборУченик Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Объект.Контрагент; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Если ЭлементНастройки.ЛевоеЗначение = ОтборТариф Тогда 
				ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
				ЭлементНастройки.ПравоеЗначение = Объект.Подразделение; 
				ЭлементНастройки.Использование = Истина; 
				Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
					ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
					Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
						ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
						ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
						ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
					КонецЕсли; 
				КонецЕсли;
				Прервать; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВзаиморасчеты(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда		
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере();
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	Иначе
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", , ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект)
КонецПроцедуры

&НаСервере
Функция РассчитатьОстатокБонусовНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеДисконтныхКартОстатки.СуммаБонусовОстаток КАК СуммаБонусовОстаток
	|ИЗ
	|	РегистрНакопления.LM_ДвижениеДисконтныхКарт.Остатки(, ) КАК ДвижениеДисконтныхКартОстатки
	|ГДЕ
	|	ДвижениеДисконтныхКартОстатки.ДисконтнаяКарта = &ДисконтнаяКарта";
	Запрос.УстановитьПараметр("ДисконтнаяКарта", Объект.ДисконтнаяКарта);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
		С = Новый Структура;
		С.Вставить("СуммаБонусовОстаток",ВыборкаДетальныеЗаписи.СуммаБонусовОстаток);
		Возврат с;			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьОстатокБонусов(Команда)
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		с = РассчитатьОстатокБонусовНаСервере();
		Если с <> Неопределено Тогда
			//Объект.СуммаБонусов = с.СуммаБонусовОстаток;
			ДоступноБонусов 	= с.СуммаБонусовОстаток;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		с = РассчитатьОстатокБонусовНаСервере();
		Если с <> Неопределено Тогда
			ДоступноБонусов = с.СуммаБонусовОстаток;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.СуммаБонусов) и НЕ ЗначениеЗаполнено(Объект.ДисконтнаяКарта) Тогда
		Сообщить("Не выбрана дисконтная карта! Так как выбрана оплата бонусами.");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Владелец", Объект.Контрагент); 
	ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыОтбора); 
	ОткрытьФорму("Справочник.LM_ДисконтныеКарты.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоступноДенегНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = ОткрытьДвиженяПоДисконтнойКартеНаСервере(Объект.ДисконтнаяКарта);
	ОткрытьФорму("Отчет.LM_ОтчетПоДисконтнымКартам.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаСервере
Функция ОткрытьДвиженяПоДисконтнойКартеНаСервере(Значение)
	
	КомпоновщикНастроек = Отчеты.LM_ОтчетПоДисконтнымКартам.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")); 
	//ЭлементНастройки.Значение.ДатаНачала    = '00010101';//НачалоГода(ТекущаяДата());
	//ЭлементНастройки.Значение.ДатаОкончания = '00010101';//КонецГода(ТекущаяДата());
	Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
		ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
		Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
			//ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
			ПользовательскийПараметр.Использование = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	ОтборДисконтнаяКарта = Новый ПолеКомпоновкиДанных("ДисконтнаяКарта");
	//ОтборПериод = Новый ПолеКомпоновкиДанных("Период");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборДисконтнаяКарта Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Значение; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьСуммуПоТарифу(Команда)

	Если ЗначениеЗаполнено(Объект.Тариф) Тогда		
		Объект.СуммаДокумента = ПолучитьСуммуПоТарифуНаСервере();
	КонецЕсли;
		
КонецПроцедуры
Функция ПолучитьСуммуПоТарифуНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЦеныТарифовСрезПоследних.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.LM_ЦеныТарифов.СрезПоследних(&ДатаПериода, Тариф = &Тариф) КАК ЦеныТарифовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЦеныТарифовСрезПоследних.Период УБЫВ
		|АВТОУПОРЯДОЧИВАНИЕ"; 	
	Запрос.УстановитьПараметр("ДатаПериода", ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата()));
	Запрос.УстановитьПараметр("Тариф", Объект.Тариф); 	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Возврат РезультатЗапроса[0].Сумма;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура ДвиженияДокумента(Команда)
	С = Новый Структура;
	С.Вставить("Документ",Объект.Ссылка);
	ОткрытьФорму("Отчет.LM_ДвиженияДокумента.Форма.ДвиженияДокумента",С ,ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры



