
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Номер = Данные.Номер;
	Пока Лев(Номер, 1) = "0" Цикл 
		Номер = Прав(Номер, СтрДлина(Номер) - 1);
	КонецЦикла;

	Представление = "Урок " +Номер+ " от " +Формат(Данные.Дата,"ДФ='д.ММ.гг (ЧЧ:мм) (ддд)'")+ " "
	+Данные.Ссылка.ПредметОбучения; 
	
КонецПроцедуры

Процедура ПересчитатьНачисленияПедагога(Объект) Экспорт
	        	
	ВремСтараяТЗ = Объект.НачисленияПедагогу.Выгрузить();
	
	Объект.НачисленияПедагогу.Очистить();
	
	Ставка = Объект.СтавкаПедагога;
	
	КоличествоУчениковКСписаиюОплат = 0;
	Для Каждого СтрУч из Объект.Ученики Цикл
		Если СтрУч.СписатьОплату Тогда
			КоличествоУчениковКСписаиюОплат = КоличествоУчениковКСписаиюОплат + 1;
		КонецЕсли;
	КонецЦикла;
  
	Если НЕ Ставка.Пустая() Тогда
		
		НовНачисление = Объект.НачисленияПедагогу.Добавить();
		СуммаИтого = Объект.Ученики.Итог("Сумма");
		Если Ставка.ОплатаСЧеловека > 0 Тогда
			НовНачисление.СуммаНачисления 	= КоличествоУчениковКСписаиюОплат * Ставка.ОплатаСЧеловека;
			НовНачисление.Комментарий 		= "#ОплатаСЧеловека (" +КоличествоУчениковКСписаиюОплат+ " уч.)";
		ИначеЕсли Ставка.ПроцентСОплатыУченика > 0 Тогда
			НовНачисление.СуммаНачисления 	= СуммаИтого * Ставка.ПроцентСОплатыУченика / 100;
			НовНачисление.Комментарий 		= "#ПроцентСОплатыУченика (" +КоличествоУчениковКСписаиюОплат+ " уч.)";
		ИначеЕсли Ставка.ОплатаЗаЗанятие > 0 Тогда
			НовНачисление.СуммаНачисления 	= Ставка.ОплатаЗаЗанятие;
			НовНачисление.Комментарий 		= "#ОплатаЗаЗанятие";
		ИначеЕсли Ставка.ОплатаЗаЧас > 0 Тогда
			КолЧасов 						= -('00010101' - Объект.КоличествоЧасов) / 60 / 60;
			НовНачисление.СуммаНачисления 	= Ставка.ОплатаЗаЧас * КолЧасов;
			НовНачисление.Комментарий 		= "#ОплатаЗаЧас";
		КонецЕсли;
	КонецЕсли; 		
	
	// Возвращаем начисления без пометки "#"
	Для Каждого СтрокаСтаройТЗ из ВремСтараяТЗ Цикл		
		Если СтрНайти(СтрокаСтаройТЗ.Комментарий,"#")>0 или Не ЗначениеЗаполнено(СтрокаСтаройТЗ.Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		НовНачисление = Объект.НачисленияПедагогу.Добавить();
		НовНачисление.СуммаНачисления 	= СтрокаСтаройТЗ.СуммаНачисления;
		НовНачисление.Комментарий 		= СтрокаСтаройТЗ.Комментарий;
		НовНачисление.НеИзменять 		= СтрокаСтаройТЗ.НеИзменять; 		
	КонецЦикла; 	
	
КонецПроцедуры

Процедура РассчитатьТабличнуюЧасть(Объект) Экспорт
	
	LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
	
	Для Каждого Стр из Объект.Ученики Цикл				
		   
		   
		//Если LMНастроки.Свойство("ТребоватьОписаниеКНеоплаченнымУрокам") и LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокам Тогда 
		//	Если ЗначениеЗаполнено(LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС) и НачалоДня(Дата) >= LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС
		//		или НЕ ЗначениеЗаполнено(LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС) Тогда
		//		Если НЕ Стр.СписатьОплату и НЕ ЗначениеЗаполнено(Стр.Заметка) Тогда
		//			Отказ = Истина;
		//			Сообщить("В строке " +Стр.НомерСтроки+ " не указан комментарий к неоплачиваемому уроку!"+Символы.ПС+ "ТребоватьОписаниеКНеоплаченнымУрокам с " +LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС);
		//		КонецЕсли;
		//	КонецЕсли; 						
		//КонецЕсли;			
		
		Если ЗначениеЗаполнено(Стр.Тариф) и Стр.СписатьОплату Тогда 
			СтруктураЦеныТарифа = РегистрыСведений.LM_ЦеныТарифов.ПолучитьСуммуТарифаНаДату(Стр.Тариф,Объект.Дата);
			
			Если СтруктураЦеныТарифа = Неопределено Тогда
				ТекстСообщения = "У тарифа: " +Стр.Тариф+ " на дату: " +Объект.Дата+ " не установлена цена!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			Иначе
				Если СтруктураЦеныТарифа.КоличествоЧасов = 0 Тогда
					ТекстСообщения = "У тарифа: " +Стр.Тариф + " не указано Количество часов!";
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли; 					
			
			КоэффициентСекунд = -('00010101' - Объект.КоличествоЧасов) / 60 / 60;
			Стр.Сумма = СтруктураЦеныТарифа.Сумма * КоэффициентСекунд / СтруктураЦеныТарифа.КоличествоЧасов;
			
			Если ЗначениеЗаполнено(Стр.Скидка) Тогда
				Если Стр.Скидка.КоэффициентСумма <> 0 Тогда
					СуммаСкидки = Стр.Скидка.КоэффициентСумма;
				ИначеЕсли Стр.Скидка.КоэффициентПроцент <> 0 Тогда
					СуммаСкидки = (Стр.Сумма / 100) * Стр.Скидка.КоэффициентПроцент;
				КонецЕсли;                                            //4000 / 8 = 500 * 2ч = 1000 - 50% = 500
				
				Стр.СуммаСкидки = СуммаСкидки;
				Стр.Сумма = Стр.Сумма - СуммаСкидки;
				
			КонецЕсли;
			
		Иначе //Нет списания оплаты
			Стр.Сумма 			= 0;
			Стр.СуммаСкидки 			= 0;
		КонецЕсли; //ТарифНеЗаполнен 			
		
		LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
		Если LMНастроки.Свойство("ИспользоватьОкругление") Тогда
			Стр.Сумма = Окр(Стр.Сумма);
			Стр.СуммаСкидки = Окр(Стр.СуммаСкидки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьДокументПоГрафикуРабочегоВремени(Объект) Экспорт
	
	//Проверка урока на график габочего времени педагога
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРабочегоВремениПедагога.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.LM_ГрафикРабочегоВремениПедагога КАК ГрафикРабочегоВремениПедагога
	|ГДЕ
	|	ГрафикРабочегоВремениПедагога.Проведен
	|	И ГрафикРабочегоВремениПедагога.Педагог = &Педагог
	|	И ГрафикРабочегоВремениПедагога.Дата = &Дата";	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Педагог", Объект.Педагог); 	
	ГрафикиРабочегоВремени = Запрос.Выполнить().Выгрузить();
	
	Если ГрафикиРабочегоВремени.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата КАК Дата,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала КАК ВремяНачала,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	Документ.LM_ГрафикРабочегоВремениПедагога.ТЧ КАК ГрафикРабочегоВремениПедагогаТЧ
		|ГДЕ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала <= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания >= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Ссылка", ГрафикиРабочегоВремени[0].Ссылка);	
		КонецПериодаЭтогоДокумента = Объект.Дата - ('00010101' - Объект.КоличествоЧасов); //ДатаДокумента + КолЧасовДокумента
		Запрос.УстановитьПараметр("ДатаДокумента", '00010101' +(КонецПериодаЭтогоДокумента-НачалоДня(Объект.Дата)));//Дата-НачалоДня(Дата)=Часы
		
		СвободныеПериоды = Запрос.Выполнить().Выгрузить();
		
		Если СвободныеПериоды.Количество()>0 Тогда //То есть существует документ ГрафикУчетаРабВремени
			
		Иначе
			С = Новый Структура;
			С.Вставить("Ссылка",ГрафикиРабочегоВремени[0].Ссылка);
			С.Вставить("Педагог",ГрафикиРабочегоВремени[0].Ссылка.Педагог);
			С.Вставить("Дата",ГрафикиРабочегоВремени[0].Ссылка.Дата);
			Возврат С;
		КонецЕсли;
	КонецЕсли;
	
	//1. Найти все интервалы даты и время Педагога в графике
	//2. Проверить этот урок в интервале   
	Возврат Неопределено;

КонецФункции

Функция ДокументПересекаетсяСДругими(Объект) Экспорт
	
	Структ = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) КАК Поле1
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Педагог = &Педагог
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Педагог", Объект.Педагог);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Объект.Дата-('00010101'-Объект.КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Структ.Вставить("Дата",РезультатЗапроса[0].Ссылка.Дата);
		Структ.Вставить("Педагог",РезультатЗапроса[0].Ссылка.Педагог);
		Структ.Вставить("Помещение",РезультатЗапроса[0].Ссылка.Помещение);
		Структ.Вставить("Ссылка",РезультатЗапроса[0].Ссылка);
		Структ.Вставить("КоличествоЧасов",РезультатЗапроса[0].Ссылка.КоличествоЧасов);
		Структ.Вставить("Номер",РезультатЗапроса[0].Ссылка.Номер);
		Возврат Структ;	
	КонецЕсли;
	
	
	//Пересечение по помещению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) КАК Поле1
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Помещение = &Помещение
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Объект.Дата-('00010101'-Объект.КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Структ.Вставить("Дата",РезультатЗапроса[0].Ссылка.Дата);
		Структ.Вставить("Педагог",РезультатЗапроса[0].Ссылка.Педагог);
		Структ.Вставить("Помещение",РезультатЗапроса[0].Ссылка.Помещение);
		Структ.Вставить("Ссылка",РезультатЗапроса[0].Ссылка);
		Структ.Вставить("КоличествоЧасов",РезультатЗапроса[0].Ссылка.КоличествоЧасов);
		Структ.Вставить("Номер",РезультатЗапроса[0].Ссылка.Номер);
		Возврат Структ;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

