Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Округление секунд
	Минута = ?(Минута(Дата)=0,1,Минута(Дата));
	НоваяДата = НачалоЧаса(Дата) + (60*Минута);
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.АвторДокумента) Тогда
		ЭтотОбъект.АвторДокумента = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;     	
	
	Если ЗначениеЗаполнено(ГруппаОбучения) и ПроверкаНаКорректностьВыбраннойГруппыОбучения() Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если Не ПометкаУдаления Тогда
		
		Для Каждого Стр из Ученики Цикл				
			
			Если НЕ ЗначениеЗаполнено(Стр.Часы) Тогда
				Стр.Часы = КоличествоЧасов;
			КонецЕсли;
			
			//Если ЗначениеЗаполнено(Организация) Тогда
			LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
			Если LMНастроки.Свойство("ТребоватьОписаниеКНеоплаченнымУрокам") и LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокам Тогда 
				Если ЗначениеЗаполнено(LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС) и НачалоДня(Дата) >= LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС
					или НЕ ЗначениеЗаполнено(LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС) Тогда
					Если НЕ Стр.СписатьОплату и НЕ ЗначениеЗаполнено(Стр.Заметка) Тогда
						Отказ = Истина;
						Сообщить("В строке " +Стр.НомерСтроки+ " не указан комментарий к неоплачиваемому уроку!"+Символы.ПС+ "ТребоватьОписаниеКНеоплаченнымУрокам с " +LMНастроки.ТребоватьОписаниеКНеоплаченнымУрокамС);
					КонецЕсли;
				КонецЕсли; 						
			КонецЕсли;			
			
			Если НЕ ЗначениеЗаполнено(Стр.Тариф) Тогда 
			Иначе
				СтруктураЦеныТарифа = РегистрыСведений.LM_ЦеныТарифов.ПолучитьСуммуТарифаНаДату(Стр.Тариф,Дата);
				
				Если СтруктураЦеныТарифа = 0 Тогда
					Сообщить("У тарифа: " +Стр.Тариф+ " на дату: " +Дата+ " не установлена цена!");
					Возврат;
				КонецЕсли;
				
				Если СтруктураЦеныТарифа.КоличествоЧасов = 0 Тогда
					Сообщить("У тарифа: " +Стр.Тариф + " не указано Количество часов!");
					Возврат;
				КонецЕсли;
				
				КоэффициентСекунд = -('00010101' - Стр.Часы) / 60 / 60;
				
				Если Стр.СписатьОплату Тогда
					Если ЗначениеЗаполнено(Стр.Коэффициент) Тогда
						Если Стр.Коэффициент.КоэффициентСумма <> 0 Тогда
							СуммаСкидки = Стр.Коэффициент.КоэффициентСумма;
						ИначеЕсли Стр.Коэффициент.КоэффициентПроцент <> 0 Тогда
							СуммаСкидки = (СтруктураЦеныТарифа.Сумма / 100) * Стр.Коэффициент.КоэффициентПроцент;
						КонецЕсли;                                            //4000 / 8 = 500 * 2ч = 1000 - 50% = 500
						СуммаПоТарифуЗаЧасБезСкидки = СтруктураЦеныТарифа.Сумма / СтруктураЦеныТарифа.КоличествоЧасов;
						СуммаПоТарифуЗаЧасСоСкидкой = (СтруктураЦеныТарифа.Сумма - СуммаСкидки) / СтруктураЦеныТарифа.КоличествоЧасов;
						
						Стр.Сумма 			= СуммаПоТарифуЗаЧасСоСкидкой * КоэффициентСекунд;
						Стр.Скидка 			= (СуммаПоТарифуЗаЧасБезСкидки * КоэффициентСекунд) - Стр.Сумма;				
						
					Иначе
						Стр.Сумма 			= СтруктураЦеныТарифа.Сумма * КоэффициентСекунд / СтруктураЦеныТарифа.КоличествоЧасов;
						Стр.Скидка 			= 0;
					КонецЕсли;
					
				Иначе //Нет списания оплаты
					Стр.Сумма 			= 0;
					Стр.Скидка 			= 0;
				КонецЕсли;
			КонецЕсли; //ТарифНеЗаполнен 			
			
			LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
			Если LMНастроки.Свойство("ИспользоватьОкругление") Тогда
				//Если ЗначениеЗаполнено(Организация) Тогда
					Стр.Сумма = Окр(Стр.Сумма);
					Стр.Скидка = Окр(Стр.Скидка);
				//КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Сумма 		= Ученики.Итог("Сумма");
		СуммаСкидки = Ученики.Итог("Скидка");
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и ЗначениеЗаполнено(Педагог) Тогда
					
		//Пересечение проверяется с подобными по периоду начала и окончания урока и Педагогу
		ДокументПересечения = ДокументПересекаетсяСДругими();
		
		НомерБезНулей = Ссылка.Номер;
		Пока Найти(НомерБезНулей,"0") = 1 Цикл
			НомерБезНулей = Сред(НомерБезНулей,2); //удаляет лидирующие нули
		КонецЦикла; 
				
		ИтогПроверки = ПроверитьДокументПоГрафикуРабочегоВремени();
		Если ИтогПроверки <> Неопределено Тогда 	
			ТекстОповещения = "Урок №"+НомерБезНулей+ " от " +Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Ссылка.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Ссылка.Дата-('00010101'-Ссылка.КоличествоЧасов),"ДФ=HH:mm") + " не входит в график учета рабочего времени педагога " 
			+ИтогПроверки.Педагог+ " (" +Формат(ИтогПроверки.Дата,"ДФ='ММММ гггг ""г"".'")+ ")!!!";
			Сообщить(ТекстОповещения);
		КонецЕсли;

		Если ДокументПересечения <> Неопределено Тогда
			
			НомерБезНулей2 = ДокументПересечения.Номер;
			Пока Найти(НомерБезНулей2,"0") = 1 Цикл
				НомерБезНулей2 = Сред(НомерБезНулей2,2); //удаляет лидирующие нули
			КонецЦикла;
			
			ТекстОповещения = "Урок №"+НомерБезНулей+ " от " +Формат(Ссылка.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Ссылка.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Ссылка.Дата-('00010101'-Ссылка.КоличествоЧасов),"ДФ=HH:mm")+ " пересекается по времени с уроком №"+НомерБезНулей2+ 
			" с " +Формат(ДокументПересечения.Дата,"ДФ=HH:mm")+	" по " +Формат(ДокументПересечения.Дата-('00010101'-ДокументПересечения.КоличествоЧасов),"ДФ=HH:mm")+ " "
			+ ?(Ссылка.Педагог = ДокументПересечения.Педагог, "по педагогу: " +ДокументПересечения.Педагог+ "!!!","")
			+ ?(Ссылка.Помещение = ДокументПересечения.Помещение, "по помещению: " +ДокументПересечения.Помещение+ "!!!","");
			
			Сообщить(ТекстОповещения);
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Окончание = Дата - ('00010101'-КоличествоЧасов);
		
КонецПроцедуры 

Функция ДокументПересекаетсяСДругими()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Педагог = &Педагог
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Педагог", Педагог);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Дата-('00010101'-КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Возврат РезультатЗапроса[0].Ссылка;	
	КонецЕсли;
	
	
	//Пересечение по помещению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Помещение = &Помещение
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Дата-('00010101'-КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Возврат РезультатЗапроса[0].Ссылка;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьДокументПоГрафикуРабочегоВремени()
	
	//Проверка урока на график габочего времени педагога
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРабочегоВремениПедагога.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.LM_ГрафикРабочегоВремениПедагога КАК ГрафикРабочегоВремениПедагога
	|ГДЕ
	|	ГрафикРабочегоВремениПедагога.Проведен
	|	И ГрафикРабочегоВремениПедагога.Педагог = &Педагог
	|	И ГрафикРабочегоВремениПедагога.Дата = &Дата";	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Педагог", Педагог); 	
	ГрафикиРабочегоВремени = Запрос.Выполнить().Выгрузить();
	
	Если ГрафикиРабочегоВремени.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата КАК Дата,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала КАК ВремяНачала,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	Документ.LM_ГрафикРабочегоВремениПедагога.ТЧ КАК ГрафикРабочегоВремениПедагогаТЧ
		|ГДЕ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала <= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания >= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Дата));
		Запрос.УстановитьПараметр("Ссылка", ГрафикиРабочегоВремени[0].Ссылка);	
		КонецПериодаЭтогоДокумента = Дата - ('00010101' - КоличествоЧасов); //ДатаДокумента + КолЧасовДокумента
		Запрос.УстановитьПараметр("ДатаДокумента", '00010101' +(КонецПериодаЭтогоДокумента-НачалоДня(Дата)));//Дата-НачалоДня(Дата)=Часы
		
		СвободныеПериоды = Запрос.Выполнить().Выгрузить();
		
		Если СвободныеПериоды.Количество()>0 Тогда //То есть существует документ ГрафикУчетаРабВремени
			
		Иначе
			Возврат ГрафикиРабочегоВремени[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	//1. Найти все интервалы даты и время Педагога в графике
	//2. Проверить этот урок в интервале   
	Возврат Неопределено;
	
КонецФункции

Процедура ОбработкаПроведения(Отказ, Режим)
	
	LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
	Если LMНастроки.Свойство("ДатаЗапретаРедактирования") Тогда
	//Если ЗначениеЗаполнено(Организация) и ЗначениеЗаполнено(Организация.LM_ДатаЗапретаРедактирования) Тогда
		
		ДатаЗапрета = LMНастроки.ДатаЗапретаРедактирования;
		ТолькоНеделя = LMНастроки.ДатаЗапретаРедактированияНеделя;
		Если ЗначениеЗаполнено(ДатаЗапрета) Тогда
			Если Дата <= ДатаЗапрета	Тогда
				Отказ = Истина;
				Сообщить("Запрещено изменение документов ранее " +ДатаЗапрета);
				Возврат;
			КонецЕсли; 				
		КонецЕсли; 
		
		//Запрещено редактировать документы в закрытом периоде для Менеджеров
		Если ТолькоНеделя и РольДоступна("LM_Менеджер") и НЕ РольДоступна("ПолныеПрава")Тогда
			Отказ = Истина;
			Сообщить("Запрещено изменение документов ранее " +НачалоДня(НачалоДня(ТекущаяДата())-604800)+ " для Менеджеров");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр из Ученики Цикл
		
		// регистр СписанияСуммЗаУроки Расход 		
		Движения.LM_СписанияСуммЗаУроки.Записывать = Истина;
		Движение = Движения.LM_СписанияСуммЗаУроки.Добавить();
		Движение.ВидДвижения 		= ВидДвиженияНакопления.Расход;
		Движение.Период 	 		= Дата;
		Движение.Клиент 	 		= Стр.Ученик;
		Движение.Педагог 	 		= Педагог;
		Движение.ПредметОбучения 	= ПредметОбучения;
		Движение.Тариф  	 		= Стр.Тариф;
		Движение.Часы 		 		= -(Дата("01.01.0001 0:00:00") - Стр.Часы); //в секундах
		Движение.Сумма  	 		= Стр.Сумма;
		Движение.Скидка  	 		= Стр.Коэффициент;
		Движение.ГруппаОбучения 	= ГруппаОбучения;
		Движение.Организация 		= Организация;
		Движение.Явка				= Стр.Явка;
		
		Если ЗначениеЗаполнено(Стр.ДисконтнаяКарта) Тогда
			
			Если ЗначениеЗаполнено(Стр.ДисконтнаяКарта.ДатаОкончанияДействия) и Дата > КонецДня(Стр.ДисконтнаяКарта.ДатаОкончанияДействия) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "У дисконтной карты: " +Стр.ДисконтнаяКарта+ " истек срок действия! Действительна по " +Формат(Стр.ДисконтнаяКарта.ДатаОкончанияДействия,"ДФ=dd.MM.yyyy");
				Сообщение.Сообщить();
			КонецЕсли;
			
			// регистр ДвижениеДисконтныхКарт Расход 		
			Движения.LM_ДвижениеДисконтныхКарт.Записывать = Истина;
			Движение = Движения.LM_ДвижениеДисконтныхКарт.Добавить();
			Движение.ВидДвижения 		= ВидДвиженияНакопления.Приход;
			Движение.Период 	 		= Дата;
			Движение.Клиент 	 		= Стр.Ученик;
			Движение.ДисконтнаяКарта	= Стр.ДисконтнаяКарта;
			Движение.СуммаБонусов  	 	= Стр.СуммаБонусов;
			Движение.Организация 		= Организация;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

Процедура ПриКопировании(ОбъектКопирования)
	
	АвторДокумента = Неопределено;
	Комментарий    = Неопределено;
	
	Если Не ЗначениеЗаполнено(ОбъектКопирования.Организация) Тогда
		LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, LMНастроки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаНаКорректностьВыбраннойГруппыОбучения()
	
	ЕстьОграничения = Ложь;
	Для Каждого Стр из Ученики Цикл
		
		Если НЕ Стр.Ученик.ТолькоВыбранныеГруппыОбучения Тогда
			Продолжить;
		КонецЕсли;
		
		ПарметрыОтбора = Новый Структура;
		ПарметрыОтбора.Вставить("ГруппаОбучения",ГруппаОбучения);
		НайденныеГруппы = Стр.Ученик.ГруппыОбучения.НайтиСтроки(ПарметрыОтбора);
		Если НайденныеГруппы.Количество() > 0 Тогда
			Для Каждого СтрГр из НайденныеГруппы Цикл
				Если Дата > КонецДня(СтрГр.ДатаОкончания) Тогда
					Сообщить(""+Ссылка+ " для ученика " +Стр.Ученик+ " окончен срок группы " +КонецДня(СтрГр.ДатаОкончания)+ " " +ГруппаОбучения+ "!");
					ЕстьОграничения = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Сообщить(""+Ссылка+ " для ученика " +Стр.Ученик+ " не разрешена группа " +ГруппаОбучения+ "!");
			ЕстьОграничения = Истина;			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ЕстьОграничения;
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда		
		LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, LMНастроки);
	КонецЕсли;
	
КонецПроцедуры

