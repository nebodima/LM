Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект)
КонецПроцедуры
Функция РассчитатьЗадолженность(Ученик, ПредметОбучения, Организация)
	
	Если ПредметОбучения <> Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.ПредметОбучения = &ПредметОбучения
		|	И СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.Организация = &Организация"; 		
		Запрос.УстановитьПараметр("ПредметОбучения", ПредметОбучения);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.Организация = &Организация";   	
	КонецЕсли;	
	Запрос.УстановитьПараметр("Клиент", Ученик);
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат -ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции
Функция ОткрытьВзаиморасчетыНаСервере(Ученик)
	
	КомпоновщикНастроек = Отчеты.LM_Взаиморасчеты.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	//ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")); 
	////ЭлементНастройки.Значение.ДатаНачала    = '00010101';//НачалоГода(ТекущаяДата());
	////ЭлементНастройки.Значение.ДатаОкончания = '00010101';//КонецГода(ТекущаяДата());
	//Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
	//	ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
	//	Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
	//		//ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
	//		ПользовательскийПараметр.Использование = Ложь;
	//	КонецЕсли; 
	//КонецЕсли; 
	
	ОтборУченик = Новый ПолеКомпоновкиДанных("Клиент");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборУченик Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Ученик; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Дата") Тогда
		Дата = Параметры.Дата;
	КонецЕсли;	
	
	LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
	Если LMНастроки.Свойство("ДатаЗапретаРедактирования") Тогда
	//Если ЗначениеЗаполнено(Объект.Организация) и ЗначениеЗаполнено(Объект.Организация.LM_ДатаЗапретаРедактирования) Тогда
		ДатаЗапрета = LMНастроки.ДатаЗапретаРедактирования;
		Если Объект.Проведен и ЗначениеЗаполнено(ДатаЗапрета) Тогда
			Если Объект.Дата <= ДатаЗапрета	Тогда
				Для Каждого Элем из ЭтаФорма.Элементы Цикл				
					Попытка
						Элем.ТолькоПросмотр = Истина;			
					Исключение
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли; 		
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Для Каждого Стр из Объект.Ученики Цикл
			Стр.ЗадолженностьПоПредмету = РассчитатьЗадолженность(Стр.Ученик, Объект.ПредметОбучения, Объект.Организация);
			Стр.ЗадолженностьОбщая		= РассчитатьЗадолженность(Стр.Ученик, Неопределено, Объект.Организация);
			Стр.ОстатокБонусов 			= РассчитатьОстатокБонусов(Стр.Ученик, Стр.ДисконтнаяКарта, Объект.Организация);
		КонецЦикла;
	КонецЕсли;
	                                   
	//Если это РАСШИРЕНИЕ конфигурации
	Если Найти(Метаданные.Имя,"LessonsManagement") = 0 Тогда
		Элементы.УченикиПодбор.Видимость = Ложь;
	КонецЕсли;       	
		
КонецПроцедуры
Функция ПроверитьДокументПоГрафикуРабочегоВремени()	
	Возврат Документы.LM_Урок.ПроверитьДокументПоГрафикуРабочегоВремени(Объект);	
КонецФункции 
Функция ДокументПересекаетсяСДругими()	
	Возврат Документы.LM_Урок.ДокументПересекаетсяСДругими(Объект);	
КонецФункции
Процедура ПересчитатьТабличнуюЧасть()
	
	Документы.LM_Урок.РассчитатьТабличнуюЧасть(Объект);
	
	Объект.Сумма 		= Объект.Ученики.Итог("Сумма");
	Объект.СуммаСкидки 	= Объект.Ученики.Итог("СуммаСкидки");
	
	Объект.Окончание = Объект.Дата - ('00010101'-Объект.КоличествоЧасов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДокумента(Команда)	
	С = Новый Структура;
	С.Вставить("Документ",Объект.Ссылка);
	ОткрытьФорму("Отчет.LM_ДвиженияДокумента.Форма.ДвиженияДокумента",С ,ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.Независимый);	
КонецПроцедуры
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("ЗакрытьФормуУрока");
КонецПроцедуры
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Проверка
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение и ЗначениеЗаполнено(Объект.Педагог) Тогда
		
		НомерБезНулей = Объект.Номер;
		Пока Найти(НомерБезНулей,"0") = 1 Цикл
			НомерБезНулей = Сред(НомерБезНулей,2); //удаляет лидирующие нули
		КонецЦикла;
			
		ИтогПроверки = ПроверитьДокументПоГрафикуРабочегоВремени();
		
		Если ИтогПроверки <> Неопределено Тогда 			
			
			ТекстОповещения = "Урок № "+НомерБезНулей+ " от " +Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Объект.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Объект.Дата-('00010101'-Объект.КоличествоЧасов),"ДФ=HH:mm") + " не входит в график учета рабочего времени педагога " 
			+ИтогПроверки.Педагог+ " (" +Формат(ИтогПроверки.Дата,"ДФ='ММММ гггг ""г"".'")+ ") !!!";
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(ТекстОповещения + Символы.ПС + "Продолжить запись урока?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументПересечения = ДокументПересекаетсяСДругими();
		Если ДокументПересечения <> Неопределено Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			
	        НомерБезНулей2 = ДокументПересечения.Номер;
			Пока Найти(НомерБезНулей2,"0") = 1 Цикл
				НомерБезНулей2 = Сред(НомерБезНулей2,2); //удаляет лидирующие нули
			КонецЦикла;
			
			Ответ = Вопрос("Урок № "+НомерБезНулей+ " от " +Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Объект.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Объект.Дата-('00010101'-Объект.КоличествоЧасов),"ДФ=HH:mm")+ " пересекается по времени с уроком № "+НомерБезНулей2+ 
			" с " +Формат(ДокументПересечения.Дата,"ДФ=HH:mm")+	" по " +Формат(ДокументПересечения.Дата-('00010101'-ДокументПересечения.КоличествоЧасов),"ДФ=HH:mm")
			+ ?(Объект.Педагог = ДокументПересечения.Педагог, Символы.ПС+ "по педагогу: " +ДокументПересечения.Педагог+ " !!!","")
			+ ?(Объект.Помещение = ДокументПересечения.Помещение, Символы.ПС+ "по помещению: " +ДокументПересечения.Помещение+ " !!!","") 
			+ Символы.ПС+ "Продолжить запись урока?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;    

	КонецЕсли;  	

КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьВидимость();
	ОпределитьЦветРеквизитов();
	ОбновитьВидимостьРасходы();
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры
Процедура ОбновитьВидимость()
	
	Если НЕ Объект.Тариф.Пустая() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	LM_ЦеныТарифовСрезПоследних.Период КАК Период,
		|	LM_ЦеныТарифовСрезПоследних.КоличествоЧасов КАК КоличествоЧасов,
		|	LM_ЦеныТарифовСрезПоследних.КоличествоУроков КАК КоличествоУроков,
		|	LM_ЦеныТарифовСрезПоследних.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.LM_ЦеныТарифов.СрезПоследних(&ТекДата, ) КАК LM_ЦеныТарифовСрезПоследних
		|ГДЕ
		|	LM_ЦеныТарифовСрезПоследних.Тариф = &Тариф
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Запрос.УстановитьПараметр("Тариф", Объект.Тариф);
		Запрос.УстановитьПараметр("ТекДата", ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата()));
		Цены = Запрос.Выполнить().Выгрузить();
		
		Если Цены.Количество() > 0 Тогда
			Если Цены[0].КоличествоЧасов > 0 Тогда
				Элементы.Декорация1.Заголовок = "" +Формат(Цены[0].Сумма/Цены[0].КоличествоЧасов,"ЧДЦ=2")+ " за 1 час ("
				+Формат(Цены[0].Сумма,"ЧДЦ=2")+ " / " +Цены[0].КоличествоЧасов+ " ч.)";				
			ИначеЕсли Цены[0].КоличествоУроков > 0 Тогда
				Элементы.Декорация1.Заголовок = "" +Формат(Цены[0].Сумма/Цены[0].КоличествоУроков,"ЧДЦ=2")+ " за 1 урок ("
				+Формат(Цены[0].Сумма,"ЧДЦ=2")+ " / " +Цены[0].КоличествоУроков+ " ур.)";
			КонецЕсли;
		Иначе
			Элементы.Декорация1.Заголовок = "Нет действующих цен! Создайте новую цену в тарифе!";
		КонецЕсли;
		
	Иначе		
		//Элементы.Декорация1.Заголовок = "Тариф не выбран: - цены не рассчитаны!"; 		
	КонецЕсли;
	
КонецПроцедуры



#Region Ученики

&НаКлиенте
Процедура Подбор(Команда)
	
	ОП = Новый ОписаниеОповещения("ПодборУчениковЗавершение",ЭтотОбъект);
	ПП = Новый Структура("МножественныйВыбор",Истина);
	Отбор = Новый Структура("Родитель",ВернутьПапкуУченики());
	ПП.Вставить("Отбор", Отбор); 
	ОткрытьФорму("Справочник.LM_ФизЛица.Форма.ФормаВыбора",ПП,ЭтотОбъект,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ОткрытьФорму("Справочник.ФизЛица.Форма.ФормаПодбора",,Элементы.Ученики,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
Функция ВернутьПапкуУченики()
	Возврат Справочники.LM_ФизЛица.Ученики.Ссылка;
КонецФункции
&НаКлиенте
Процедура ПодборУчениковЗавершение(Результат,Параметры) Экспорт 
	Если Результат <> Неопределено Тогда
		Для Каждого Ученик Из Результат Цикл
			НоваяСтрока = Объект.Ученики.Добавить();
			НоваяСтрока.Ученик = Ученик;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
Процедура ДобавитьВыбранных(Массив)
	
	Попытка 
		Для Каждого Стр из Массив Цикл
			НовСтр = Объект.Ученики.Добавить();
			НовСтр.Ученик = Стр;  
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры 
&НаКлиенте
Процедура УченикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранных(ВыбранноеЗначение);
	
	ПересчитатьТабличнуюЧасть();
	
КонецПроцедуры
&НаКлиенте
Процедура УченикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УченикиЗадолженностьПоПредмету" Тогда
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере(Элементы.Ученики.ТекущиеДанные.Ученик);
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	ИначеЕсли Поле.Имя = "УченикиЗадолженностьОбщая" Тогда
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере(Элементы.Ученики.ТекущиеДанные.Ученик);
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	ИначеЕсли Поле.Имя = "Ученики1ОстатокБонусов" Тогда
		ОткрытьФорму("Отчет.LM_ОтчетПоДисконтнымКартам.Форма", , ЭтаФорма);	
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура УченикиУченикСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтроки = Новый Структура;
	
	Назв = СокрЛП(Элемент.ТекстРедактирования);
	
	Если Найти(Назв," ") > 0 Тогда
		Симв1 = Найти(Назв," ");
		ПараметрыСтроки.Вставить("Наименование",Лев(Назв,Симв1-1));
		Назв = СокрЛП(Сред(Назв,Симв1+1));
	Иначе
		ПараметрыСтроки.Вставить("Наименование",Назв);
		Назв = "";
	КонецЕсли;
	
	ПараметрыСтроки.Вставить("Группа","Ученики");
	
	Пар = Новый Структура("Ключ2", ПараметрыСтроки);
	
	ОткрытьФорму("Справочник.LM_ФизЛица.Форма.ФормаЭлемента",Пар,ЭтотОбъект,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
&НаКлиенте
Процедура УченикиУченикПриИзменении(Элемент)
	
	ТекДанные = Элементы.Ученики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Ученик) Тогда
		ТекДанные.ДисконтнаяКарта = НайтиДисконтнуюКарту(ТекДанные.Ученик);
	КонецЕсли;
	
	ТекДанные.Скидка = ВернутьСкидку(ТекДанные.Ученик);
	
	ПересчитатьТабличнуюЧасть();
	
КонецПроцедуры
Функция ВернутьСкидку(Ученик)
	Возврат Ученик.Скидка;
КонецФункции
&НаКлиенте
Процедура ПересчитатьЦеныПоТарифу(Команда)
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.ЦенаТарифа = 0;
		Стр.СуммаСкидки = 0;
		Стр.Сумма = 0;
	КонецЦикла;
	
	ПересчитатьТабличнуюЧасть();
	
КонецПроцедуры

#EndRegion


#Region ПриИзменении
&НаКлиенте
Процедура ПлатныйПриИзменении(Элемент)
	ПересчитатьТабличнуюЧасть();	
КонецПроцедуры
&НаКлиенте
Процедура ГруппаОбученияПриИзменении(Элемент)
	
	ГруппаОбученияПриИзмененииНаСервере();	
	ПересчитатьТабличнуюЧасть();
	ПересчитатьНачисленияПедагога();
	ОбновитьВидимостьНачисленийПедагогу();
	
КонецПроцедуры
Процедура ГруппаОбученияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ГруппаОбучения) Тогда
		
		Объект.Педагог 			= Объект.ГруппаОбучения.Педагог;
		Объект.СтавкаПедагога	= Объект.ГруппаОбучения.Педагог.СтавкаПедагога;
		Объект.Помещение 		= Объект.ГруппаОбучения.Помещение;
		Объект.КоличествоЧасов 	= Объект.ГруппаОбучения.Продолжительность;
		Объект.ПредметОбучения 	= Объект.ГруппаОбучения.ПредметОбучения;
		
		Если НЕ Объект.ГруппаОбучения.Тариф.Пустая() Тогда			
			Объект.Тариф = Объект.ГруппаОбучения.Тариф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 
&НаКлиенте
Процедура КоличествоЧасовПриИзменении(Элемент)
	ПересчитатьТабличнуюЧасть();
	ПересчитатьНачисленияПедагога();
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры
&НаКлиенте
Процедура УченикиЧасыПриИзменении(Элемент)
	ПересчитатьТабличнуюЧасть();
КонецПроцедуры
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ПересчитатьТабличнуюЧасть();
КонецПроцедуры 
&НаКлиенте
Процедура УченикиСписатьОплатуПриИзменении(Элемент)		
	ПересчитатьТабличнуюЧасть();
	ПересчитатьНачисленияПедагога();
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры
&НаКлиенте
Процедура УченикиКоэффициентОчистка(Элемент, СтандартнаяОбработка)
	ПересчитатьТабличнуюЧасть();
КонецПроцедуры
&НаКлиенте
Процедура УченикиТарифПриИзменении(Элемент)
	ТекДанные = Элементы.Ученики.ТекущиеДанные;
	ТекДанные.ЦенаТарифа = 0;
	ТекДанные.СуммаСкидки = 0;
	ТекДанные.Сумма = 0;
	ПересчитатьТабличнуюЧасть();
КонецПроцедуры
&НаКлиенте
Процедура ТарифПриИзменении(Элемент)
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.Тариф 		= Объект.Тариф;
		Стр.ЦенаТарифа 	= 0;
		Стр.СуммаСкидки = 0;
		Стр.Сумма 		= 0;
	КонецЦикла;
	
	ОбновитьВидимость();
	
	ПересчитатьТабличнуюЧасть();
	
КонецПроцедуры

#EndRegion 


#Region Педагог
&НаКлиенте
Процедура ИзменятьВсе(Команда)
	Для Каждого Стр из Объект.НачисленияПедагогу Цикл
		Стр.НеИзменять = НЕ Стр.НеИзменять;
	КонецЦикла;	
КонецПроцедуры 

&НаКлиенте
Процедура ПедагогПриИзменении(Элемент)	
	ПедагогПриИзмененииНаСервере();	
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры

Процедура ПедагогПриИзмененииНаСервере()
	
	Объект.НачисленияПедагогу.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Педагог) Тогда
		Объект.СтавкаПедагога = Объект.Педагог.СтавкаПедагога;
	Иначе                                    		
		Объект.СтавкаПедагога = Справочники.LM_СтавкиПедагогов.ПустаяСсылка();
	КонецЕсли;
	
	ПересчитатьНачисленияПедагога();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаПедагогаПриИзменении(Элемент)	
	ПересчитатьНачисленияПедагога();
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры  

&НаКлиенте
Процедура НачисленияПедагогуПриИзменении(Элемент)	
	ОбновитьВидимостьНачисленийПедагогу();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьНачисленийПедагогу()
	
	КоличествоНачисленийПедагогу = 0;
	
	Для Каждого СтрПед из Объект.НачисленияПедагогу Цикл
		Если ЗначениеЗаполнено(СтрПед.СуммаНачисления) Тогда
			КоличествоНачисленийПедагогу = КоличествоНачисленийПедагогу + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНачисленийПедагогу>0 Тогда
		Элементы.ГруппаНачисленияПедагогу.Заголовок = ""+КоличествоНачисленийПедагогу+ " начислений педагогу (" +Формат(Объект.НачисленияПедагогу.Итог("СуммаНачисления"),"ЧДЦ=2")+")";
	Иначе
		Элементы.ГруппаНачисленияПедагогу.Заголовок = "Начисления педагогу";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьНачисленияПедагога()	
	Документы.LM_Урок.ПересчитатьНачисленияПедагога(Объект);	
КонецПроцедуры
#EndRegion

#Region Расходы

&НаКлиенте
Процедура РасходыПриИзменении(Элемент) 	
	ОбновитьВидимостьРасходы(); 	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьРасходы()
	
	КоличествоРасходов = 0;
	
	Для Каждого СтрРасход из Объект.Расходы Цикл
		Если ЗначениеЗаполнено(СтрРасход.Сумма) Тогда
			КоличествоРасходов = КоличествоРасходов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоРасходов>0 Тогда
		Элементы.ГруппаДополнительныеРасходы.Заголовок = ""+КоличествоРасходов+ " доп. расходов (" +Формат(Объект.Расходы.Итог("Сумма"),"ЧДЦ=2")+")";
	Иначе
		Элементы.ГруппаДополнительныеРасходы.Заголовок = "Доп. расходы";
	КонецЕсли;

КонецПроцедуры

#EndRegion

#Region Бонусы

&НаКлиенте
Процедура Ученики1ПриИзменении(Элемент)
	ОбновитьВидимостьБонусы();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьБонусы()
	
	КоличествоДисконтныхКарт = 0;
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.ОстатокБонусов 			= РассчитатьОстатокБонусов(Стр.Ученик, Стр.ДисконтнаяКарта, Объект.Организация);
		
		Если ЗначениеЗаполнено(Стр.ДисконтнаяКарта) Тогда
			КоличествоДисконтныхКарт	= КоличествоДисконтныхКарт + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоДисконтныхКарт>0 Тогда
		Элементы.ГруппаБонусы.Заголовок = ""+КоличествоДисконтныхКарт+ " бонусов (" +Формат(Объект.Ученики.Итог("СуммаБонусов"),"ЧДЦ=2")+")";
	Иначе
		Элементы.ГруппаБонусы.Заголовок = "Бонусы";
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	НайтиПоШК();
КонецПроцедуры  
Процедура НайтиПоШК()
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		Для Каждого Стр из Объект.Ученики Цикл
			Если Стр.Ученик = Штрихкод.Владелец Тогда
				Стр.ДисконтнаяКарта = Штрихкод;	
			КонецЕсли; 			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НайтиПоШККоманда(Команда)
	НайтиПоШК();
КонецПроцедуры
&НаКлиенте
Процедура Ученики1ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Владелец", Элементы.Ученики.ТекущиеДанные.Ученик); 
	ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыОтбора); 
	ОткрытьФорму("Справочник.LM_ДисконтныеКарты.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтаФорма);
КонецПроцедуры
Функция РассчитатьОстатокБонусов(Ученик, ДисконтнаяКарта, Организация)
	
	Если НЕ ЗначениеЗаполнено(Ученик) или НЕ ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеДисконтныхКарт.СуммаБонусовОстаток КАК СуммаБонусовОстаток
	|ИЗ
	|	РегистрНакопления.LM_ДвижениеДисконтныхКарт.Остатки КАК ДвижениеДисконтныхКарт
	|ГДЕ
	|	ДвижениеДисконтныхКарт.Клиент = &Клиент
	|	И ДвижениеДисконтныхКарт.ДисконтнаяКарта = &ДисконтнаяКарта
	|	И ДвижениеДисконтныхКарт.Организация = &Организация";   	
	
	Запрос.УстановитьПараметр("Клиент", Ученик);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаБонусовОстаток;
	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции
Функция НайтиДисконтнуюКарту(Ученик) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.LM_ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Владелец = &Владелец
	|	И ДисконтныеКарты.ДатаОкончанияДействия > &ДатаОкончанияДействия
	|	И ДисконтныеКарты.ПометкаУдаления = ЛОЖЬ"; 	
	Запрос.УстановитьПараметр("Владелец", Ученик);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ?(ЗначениеЗаполнено(Объект.Дата),КонецДня(Объект.Дата),КонецДня(ТекущаяДата())));	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество()=1 Тогда
		Возврат РезультатЗапроса[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#EndRegion

#Region ЦветПомещения

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	ОпределитьЦветРеквизитов();
КонецПроцедуры

Процедура ОпределитьЦветРеквизитов()
	
	Если ЗначениеЗаполнено(Объект.Помещение) и ЗначениеЗаполнено(Объект.Помещение.Цвет) Тогда
		Элементы.Помещение.ЦветРамки = WebЦвета[Объект.Помещение.Цвет];
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.ПредметОбучения) и ЗначениеЗаполнено(Объект.ПредметОбучения.Цвет) Тогда
	//	Элементы.ПредметОбучения.ЦветРамки = WebЦвета[Объект.ПредметОбучения.Цвет];
	//КонецЕсли;
	
КонецПроцедуры

#EndRegion

