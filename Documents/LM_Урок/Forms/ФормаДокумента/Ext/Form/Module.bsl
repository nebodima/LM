
&НаСервере
Процедура ОбновитьВидимость()
	
	//Устанавливаем фото из временного хранилища
	//Если НЕ ПустаяСтрока(Объект.Педагог.Фото) Тогда
	//	ФотоПедагога = ПоместитьВоВременноеХранилище(Объект.Педагог.Фото.Файл.Получить());
	//Иначе
	//	ФотоПедагога = "";
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.ПредметОбучения) и ЗначениеЗаполнено(Объект.ПредметОбучения.Фото) Тогда
	//	Фото = ПоместитьВоВременноеХранилище(Объект.ПредметОбучения.Фото.Файл.Получить());
	//Иначе
	//	Фото = "";
	//КонецЕсли; 	
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.Часы = Объект.КоличествоЧасов;	
	КонецЦикла;
	
	ЦенаЗаЧас   = 0;
	КолСекунд   = 0;
	
	Элементы.УченикиСписатьОплату.Доступность = Истина;
	
	Для Каждого Стр из Объект.Ученики Цикл 		
		
		Если НЕ ЗначениеЗаполнено(Стр.Тариф) Тогда 
			//Сообщить("Не выбран тариф у ученика: "+Стр.Ученик+"; строка: "+Стр.НомерСтроки);
			Стр.Сумма  			= 0;
			Стр.Скидка 			= 0;
		Иначе				
			
			СтруктураЦеныТарифа = РегистрыСведений.LM_ЦеныТарифов.ПолучитьСуммуТарифаНаДату(Стр.Тариф,Объект.Дата);
			
			Если СтруктураЦеныТарифа = 0 Тогда
				Сообщить("У тарифа: " +Стр.Тариф+ " на дату: " +Объект.Дата+ " не установлена цена!");
				Возврат;
			КонецЕсли;
			
			Если СтруктураЦеныТарифа.КоличествоЧасов = 0 Тогда
				Сообщить("У тарифа: " +Стр.Тариф + " не указано Количество часов!");
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Стр.Часы) Тогда 
				Стр.Часы					= Объект.КоличествоЧасов;
			КонецЕсли;    
			
			Если Стр.СписатьОплату Тогда
				КоэффициентСекунд = -('00010101' - Стр.Часы) / 60 / 60;
				
				Если ЗначениеЗаполнено(Стр.Коэффициент) Тогда
					Если Стр.Коэффициент.КоэффициентСумма <> 0 Тогда
						СуммаСкидки = Стр.Коэффициент.КоэффициентСумма;
					ИначеЕсли Стр.Коэффициент.КоэффициентПроцент <> 0 Тогда
						СуммаСкидки = (СтруктураЦеныТарифа.Сумма / 100) * Стр.Коэффициент.КоэффициентПроцент;
					КонецЕсли;                                            //4000 / 8 = 500 * 2ч = 1000 - 50% = 500
					СуммаПоТарифуЗаЧасБезСкидки = СтруктураЦеныТарифа.Сумма / СтруктураЦеныТарифа.КоличествоЧасов;
					СуммаПоТарифуЗаЧасСоСкидкой = (СтруктураЦеныТарифа.Сумма - СуммаСкидки) / СтруктураЦеныТарифа.КоличествоЧасов;
					
					Стр.Сумма 			= СуммаПоТарифуЗаЧасСоСкидкой * КоэффициентСекунд;
					Стр.Скидка 			= (СуммаПоТарифуЗаЧасБезСкидки * КоэффициентСекунд) - Стр.Сумма;				
					
				Иначе //скидка не выбрана
					Стр.Сумма 			= СтруктураЦеныТарифа.Сумма * КоэффициентСекунд / СтруктураЦеныТарифа.КоличествоЧасов;
					Стр.Скидка 			= 0;
				КонецЕсли;
				
			Иначе //Нет списания оплаты
				Стр.Сумма 			= 0;
				Стр.Скидка 			= 0;
			КонецЕсли;
		КонецЕсли;//Если ТарифНеЗаполнен
		
		
		Стр.ЗадолженностьПоПредмету = РассчитатьЗадолженность(Стр.Ученик, Объект.ПредметОбучения, Объект.Организация);
		Стр.ЗадолженностьОбщая		= РассчитатьЗадолженность(Стр.Ученик, Неопределено, Объект.Организация);
		Стр.ОстатокБонусов 			= РассчитатьОстатокБонусов(Стр.Ученик, Стр.ДисконтнаяКарта, Объект.Организация);
		
		LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
		Если LMНастроки.Свойство("ИспользоватьОкругление") Тогда			
			//Если ЗначениеЗаполнено(Объект.Организация) Тогда
			Стр.Сумма = Окр(Стр.Сумма);
			Стр.Скидка = Окр(Стр.Скидка);
			//КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Сумма 		= Объект.Ученики.Итог("Сумма");
	Объект.СуммаСкидки 	= Объект.Ученики.Итог("Скидка");
	
	Объект.Окончание = Объект.Дата - ('00010101'-Объект.КоличествоЧасов);
	
	ОбновитьЗаголовок();
	
	ОпределитьЦветПомещенияИдр();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьКратко()
	
	//Устанавливаем фото из временного хранилища
	//Если НЕ ПустаяСтрока(Объект.Педагог.Фото) Тогда
	//	ФотоПедагога = ПоместитьВоВременноеХранилище(Объект.Педагог.Фото.Файл.Получить());
	//Иначе
	//	ФотоПедагога = "";
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.ПредметОбучения) и ЗначениеЗаполнено(Объект.ПредметОбучения.Фото) Тогда
	//	Фото = ПоместитьВоВременноеХранилище(Объект.ПредметОбучения.Фото.Файл.Получить());
	//Иначе
	//	Фото = "";
	//КонецЕсли; 	
	
	
	Элементы.УченикиСписатьОплату.Доступность = Истина;
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.ЗадолженностьПоПредмету = РассчитатьЗадолженность(Стр.Ученик, Объект.ПредметОбучения, Объект.Организация);
		Стр.ЗадолженностьОбщая		= РассчитатьЗадолженность(Стр.Ученик, Неопределено, Объект.Организация);
		Стр.ОстатокБонусов 			= РассчитатьОстатокБонусов(Стр.Ученик, Стр.ДисконтнаяКарта, Объект.Организация);
	КонецЦикла;
	
	ОбновитьЗаголовок();
	
	ОпределитьЦветПомещенияИдр();
	
КонецПроцедуры


Процедура ОбновитьЗаголовок()
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Этаформа.АвтоЗаголовок = Ложь;
	//	Заголовок = "Урок " +Объект.Номер+ " от " +Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+ " " 
	//	+Формат(Объект.Дата,"ДФ=HH:mm")+ " ("+Формат(Объект.Дата,"ДФ=dddd")+ ") "
	//	+Объект.ПредметОбучения.Наименование +?(Объект.Проведен," (проведен)","");
	//КонецЕсли;
	
КонецПроцедуры 

Процедура ОпределитьЦветПомещенияИдр()
	
	Если ЗначениеЗаполнено(Объект.Помещение) и ЗначениеЗаполнено(Объект.Помещение.Цвет) Тогда
		Элементы.Помещение.ЦветТекстаЗаголовка = WebЦвета[Объект.Помещение.Цвет];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПредметОбучения) и ЗначениеЗаполнено(Объект.ПредметОбучения.Цвет) Тогда
		Элементы.ПредметОбучения.ЦветТекстаЗаголовка = WebЦвета[Объект.ПредметОбучения.Цвет];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьФото()
	
	//Устанавливаем фото из временного хранилища
	//Если НЕ ПустаяСтрока(Объект.Педагог.Фото) Тогда
	//	ФотоПедагога = ПоместитьВоВременноеХранилище(Объект.Педагог.Фото.Файл.Получить());
	//Иначе
	//	ФотоПедагога = "";
	//КонецЕсли;
	//
	//Если ЗначениеЗаполнено(Объект.ПредметОбучения) и ЗначениеЗаполнено(Объект.ПредметОбучения.Фото) Тогда
	//	Фото = ПоместитьВоВременноеХранилище(Объект.ПредметОбучения.Фото.Файл.Получить());
	//Иначе
	//	Фото = "";
	//КонецЕсли;
	
	ОпределитьЦветПомещенияИдр();
	
КонецПроцедуры

&НаСервере
Функция РассчитатьЗадолженность(Ученик, ПредметОбучения, Организация)
	
	Если ПредметОбучения <> Неопределено Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.ПредметОбучения = &ПредметОбучения
		|	И СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.Организация = &Организация"; 		
		Запрос.УстановитьПараметр("ПредметОбучения", ПредметОбучения);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СписанияСуммЗаУрокиОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_СписанияСуммЗаУроки.Остатки КАК СписанияСуммЗаУрокиОстатки
		|ГДЕ
		|	СписанияСуммЗаУрокиОстатки.Клиент = &Клиент
		|	И СписанияСуммЗаУрокиОстатки.Организация = &Организация";   	
	КонецЕсли;	
	Запрос.УстановитьПараметр("Клиент", Ученик);
	Запрос.УстановитьПараметр("Организация", Организация);
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции

&НаСервере
Функция РассчитатьОстатокБонусов(Ученик, ДисконтнаяКарта, Организация)
	
	Если НЕ ЗначениеЗаполнено(Ученик) или НЕ ЗначениеЗаполнено(ДисконтнаяКарта) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеДисконтныхКарт.СуммаБонусовОстаток КАК СуммаБонусовОстаток
	|ИЗ
	|	РегистрНакопления.LM_ДвижениеДисконтныхКарт.Остатки КАК ДвижениеДисконтныхКарт
	|ГДЕ
	|	ДвижениеДисконтныхКарт.Клиент = &Клиент
	|	И ДвижениеДисконтныхКарт.ДисконтнаяКарта = &ДисконтнаяКарта
	|	И ДвижениеДисконтныхКарт.Организация = &Организация";   	
	
	Запрос.УстановитьПараметр("Клиент", Ученик);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДисконтнаяКарта", ДисконтнаяКарта);
	РезультатЗапроса = Запрос.Выполнить(); 	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаБонусовОстаток;
	КонецЦикла;	
	
	Возврат 0;
	
КонецФункции


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Объект.ГруппаОбучения) Тогда
		Элементы.ПредметОбучения.ТолькоПросмотр 	= Истина;
	Иначе
		Элементы.ПредметОбучения.ТолькоПросмотр 	= Ложь;
	КонецЕсли;
	
	Для Каждого Стр из Объект.Ученики Цикл
		Стр.ЗадолженностьПоПредмету = РассчитатьЗадолженность(Стр.Ученик, Объект.ПредметОбучения, Объект.Организация);
	КонецЦикла;
	
	ОбновитьВидимостьФото();
	
	ОбновитьЗаголовок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Оповестить("ЗакрытьФормуУрока");
КонецПроцедуры


&НаКлиенте
Процедура УченикиСписатьОплатуПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ОП = Новый ОписаниеОповещения("ПодборУчениковЗавершение",ЭтотОбъект);
	ПП = Новый Структура("МножественныйВыбор",Истина);
	Отбор = Новый Структура("Родитель",ВернутьПапкуУченики());
	ПП.Вставить("Отбор", Отбор); 
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаВыбора",ПП,ЭтотОбъект,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	//ОткрытьФорму("Справочник.ФизЛица.Форма.ФормаПодбора",,Элементы.Ученики,ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры
Функция ВернутьПапкуУченики()
	Возврат Справочники.Контрагенты.Ученики.Ссылка;
КонецФункции

&НаКлиенте
Процедура ПодборУчениковЗавершение(Результат,Параметры) Экспорт 
	Если Результат <> Неопределено Тогда
		Для Каждого Ученик Из Результат Цикл
			НоваяСтрока = Объект.Ученики.Добавить();
			НоваяСтрока.Ученик = Ученик;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыбранных(Массив)
	
	Попытка 
		Для Каждого Стр из Массив Цикл
			НовСтр = Объект.Ученики.Добавить();
			НовСтр.Ученик = Стр;  
		КонецЦикла;
	Исключение
	КонецПопытки;
	
КонецПроцедуры 

&НаКлиенте
Процедура УченикиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДобавитьВыбранных(ВыбранноеЗначение);
	
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатныйПриИзменении(Элемент)
	ОбновитьВидимость();	
КонецПроцедуры


&НаКлиенте
Процедура УченикиПриАктивизацииСтроки(Элемент)
	
	Попытка
		ПоказатьИнформационнуюСтроку(Элементы.Ученики.ТекущиеДанные.Ученик,Элементы.Ученики.ТекущиеДанные.Тариф);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьИнформационнуюСтроку(Ученик,Тариф)
	
	//ИнформационнаяСтрока 				= "";
	//
	//Попытка
	//	ИнформационнаяСтрока = Ученик.Наименование;
	//	Если ЗначениеЗаполнено(Ученик.Возраст) Тогда
	//		ИнформационнаяСтрока = ИнформационнаяСтрока + " " +Ученик.Возраст+" лет";
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Ученик.Телефон) Тогда
	//		ИнформационнаяСтрока = ИнформационнаяСтрока + "; т.: " +Ученик.Телефон;
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(Ученик.Родитель1) Тогда
	//		ИнформационнаяСтрока = ИнформационнаяСтрока + "; Родитель: " +Ученик.Родитель1.Наименование;
	//		Если ЗначениеЗаполнено(Ученик.Родитель1.Телефон) Тогда
	//			ИнформационнаяСтрока = ИнформационнаяСтрока + "; т.: " +Ученик.Родитель1.Телефон;
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//Исключение
	//КонецПопытки;
	
	//Если НЕ ПустаяСтрока(Ученик) Тогда
	//	ФотоУченика = ПоместитьВоВременноеХранилище(Ученик.Фото.Файл.Получить());
	//Иначе
	//	ФотоУченика = "";
	//КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УченикиУченикПриИзменении(Элемент)
	
	ПоказатьИнформационнуюСтроку(Элементы.Ученики.ТекущиеДанные.Ученик,Элементы.Ученики.ТекущиеДанные.Тариф);
	
	Если ЗначениеЗаполнено(Элементы.Ученики.ТекущиеДанные.Ученик) Тогда
		Элементы.Ученики.ТекущиеДанные.ДисконтнаяКарта = НайтиДисконтнуюКарту(Элементы.Ученики.ТекущиеДанные.Ученик);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиДисконтнуюКарту(Ученик) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДисконтныеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.LM_ДисконтныеКарты КАК ДисконтныеКарты
	|ГДЕ
	|	ДисконтныеКарты.Владелец = &Владелец
	|	И ДисконтныеКарты.ДатаОкончанияДействия > &ДатаОкончанияДействия
	|	И ДисконтныеКарты.ПометкаУдаления = ЛОЖЬ"; 	
	Запрос.УстановитьПараметр("Владелец", Ученик);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия", ?(ЗначениеЗаполнено(Объект.Дата),КонецДня(Объект.Дата),КонецДня(ТекущаяДата())));	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество()=1 Тогда
		Возврат РезультатЗапроса[0].Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции



&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия <> "ЗакрытьФорму" Тогда
		ВернутьСсылку(ИмяСобытия);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВернутьСсылку(ИмяСобытия)
	//Объект.Ученики[Элементы.Ученики.ТекущаяСтрока].СкидкаИлиАкция = Справочники.Скидки.НайтиПоНаименованию(ИмяСобытия);
КонецПроцедуры

&НаКлиенте
Процедура УченикиУченикСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыСтроки = Новый Структура;
	
	Назв = СокрЛП(Элемент.ТекстРедактирования);
	
	Если Найти(Назв," ") > 0 Тогда
		Симв1 = Найти(Назв," ");
		ПараметрыСтроки.Вставить("Фамилия",Лев(Назв,Симв1-1));
		Назв = СокрЛП(Сред(Назв,Симв1+1));
	Иначе
		ПараметрыСтроки.Вставить("Фамилия",Назв);
		Назв = "";
	КонецЕсли;
	
	Если (Найти(Назв," ") > 0) и (СтрДлина(Назв) > 0) Тогда
		Симв2 = Найти(Назв," ");
		ПараметрыСтроки.Вставить("Имя",Лев(Назв,Симв2-1));
		Назв = СокрЛП(Сред(Назв,Симв2+1));
	Иначе
		ПараметрыСтроки.Вставить("Имя",Назв);
		Назв = "";
	КонецЕсли;
	
	Если СтрДлина(Назв) > 0 Тогда
		ПараметрыСтроки.Вставить("Отчество",Назв);
	КонецЕсли;
	
	ПараметрыСтроки.Вставить("Группа","Ученики");
	
	Пар = Новый Структура("Ключ2", ПараметрыСтроки);
	
	ОткрытьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента",Пар,ЭтотОбъект,ЭтаФорма.УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаОбученияПриИзменении(Элемент)
	
	ГруппаОбученияПриИзмененииНаСервере();
	
	ОбновитьВидимость();
	
КонецПроцедуры

Процедура ГруппаОбученияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ГруппаОбучения) Тогда
		Объект.Педагог 			= Объект.ГруппаОбучения.Педагог;
		Объект.Помещение 		= Объект.ГруппаОбучения.Помещение;
		Объект.КоличествоЧасов 	= Объект.ГруппаОбучения.Продолжительность;
		Объект.ПредметОбучения 	= Объект.ГруппаОбучения.ПредметОбучения;
		//Элементы.Педагог.ТолькоПросмотр				= Истина;
		//Элементы.КоличествоЧасов.ТолькоПросмотр 	= Истина;
		Элементы.ПредметОбучения.ТолькоПросмотр 	= Истина;
		//Элементы.Помещение.ТолькоПросмотр 			= Истина;
	Иначе
		//Объект.Педагог 			= Неопределено;
		//Объект.Помещение 		= Неопределено;
		//Объект.КоличествоЧасов 	= Неопределено;
		//Объект.ПредметОбучения 	= Неопределено;
		//Элементы.Педагог.ТолькоПросмотр 			= Ложь;
		//Элементы.КоличествоЧасов.ТолькоПросмотр 	= Ложь;
		Элементы.ПредметОбучения.ТолькоПросмотр 	= Ложь;
		//Элементы.Помещение.ТолькоПросмотр 			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УченикиКоэффициентОчистка(Элемент, СтандартнаяОбработка)
	ОбновитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект)
КонецПроцедуры

&НаКлиенте
Процедура УченикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УченикиЗадолженностьПоПредмету" Тогда
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере(Элементы.Ученики.ТекущиеДанные.Ученик);
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	ИначеЕсли Поле.Имя = "УченикиЗадолженностьОбщая" Тогда
		ПараметрыОткрытия = ОткрытьВзаиморасчетыНаСервере(Элементы.Ученики.ТекущиеДанные.Ученик);
		ОткрытьФорму("Отчет.LM_Взаиморасчеты.Форма", ПараметрыОткрытия, ЭтаФорма);
	ИначеЕсли Поле.Имя = "Ученики1ОстатокБонусов" Тогда
		ОткрытьФорму("Отчет.LM_ОтчетПоДисконтнымКартам.Форма", , ЭтаФорма);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрытьВзаиморасчетыНаСервере(Ученик)
	
	КомпоновщикНастроек = Отчеты.LM_Взаиморасчеты.Создать().КомпоновщикНастроек; 
	Настройки 			= КомпоновщикНастроек.Настройки; 
	
	//ЭлементНастройки = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")); 
	////ЭлементНастройки.Значение.ДатаНачала    = '00010101';//НачалоГода(ТекущаяДата());
	////ЭлементНастройки.Значение.ДатаОкончания = '00010101';//КонецГода(ТекущаяДата());
	//Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
	//	ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
	//	Если ТипЗнч(ПользовательскийПараметр) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда 
	//		//ПользовательскийПараметр.Значение = ЭлементНастройки.Значение;
	//		ПользовательскийПараметр.Использование = Ложь;
	//	КонецЕсли; 
	//КонецЕсли; 
	
	ОтборУченик = Новый ПолеКомпоновкиДанных("Клиент");
	
	Для Каждого ЭлементНастройки Из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастройки.ЛевоеЗначение = ОтборУченик Тогда 
			ЭлементНастройки.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
			ЭлементНастройки.ПравоеЗначение = Ученик; 
			ЭлементНастройки.Использование = Истина; 
			Если ЗначениеЗаполнено(ЭлементНастройки.ИдентификаторПользовательскойНастройки) Тогда 
				ПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементНастройки.ИдентификаторПользовательскойНастройки); 
				Если ТипЗнч(ПользовательскийПараметр) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда 
					ПользовательскийПараметр.ВидСравнения = ЭлементНастройки.ВидСравнения; 
					ПользовательскийПараметр.ПравоеЗначение = ЭлементНастройки.ПравоеЗначение; 
					ПользовательскийПараметр.Использование = ЭлементНастройки.Использование; 
				КонецЕсли; 
			КонецЕсли;
			Прервать; 
		КонецЕсли; 
	КонецЦикла; 
	
	ПараметрыОткрытия = Новый Структура(); 
	ПараметрыОткрытия.Вставить("СформироватьПриОткрытии", Истина); 
	ПараметрыОткрытия.Вставить("Вариант", Настройки); 
	ПараметрыОткрытия.Вставить("ПользовательскиеНастройки", КомпоновщикНастроек.ПользовательскиеНастройки); 
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Дата") Тогда
		Дата = Параметры.Дата;
	КонецЕсли;	
	
	LMНастроки = РегистрыСведений.LM_Настройки.ПолучитьПоследнее(ТекущаяДата());
	Если LMНастроки.Свойство("ДатаЗапретаРедактирования") Тогда
	//Если ЗначениеЗаполнено(Объект.Организация) и ЗначениеЗаполнено(Объект.Организация.LM_ДатаЗапретаРедактирования) Тогда
		ДатаЗапрета = LMНастроки.ДатаЗапретаРедактирования;
		Если Объект.Проведен и ЗначениеЗаполнено(ДатаЗапрета) Тогда
			Если Объект.Дата <= ДатаЗапрета	Тогда
				Для Каждого Элем из ЭтаФорма.Элементы Цикл				
					Попытка
						Элем.ТолькоПросмотр = Истина;			
					Исключение
					КонецПопытки;
				КонецЦикла;
				
			КонецЕсли; 		
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		ОбновитьВидимостьКратко();
	КонецЕсли;  	
		
КонецПроцедуры

&НаКлиенте
Процедура ШтрихкодПриИзменении(Элемент)
	НайтиПоШК();
КонецПроцедуры

Процедура НайтиПоШК()
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		
		Для Каждого Стр из Объект.Ученики Цикл
			Если Стр.Ученик = Штрихкод.Владелец Тогда
				Стр.ДисконтнаяКарта = Штрихкод;	
			КонецЕсли; 			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоШККоманда(Команда)
	НайтиПоШК();
КонецПроцедуры

//&НаКлиенте
//Процедура ОткрытьПодборПоУченику()
//	
//	Владелец = Элементы.Ученики1.ТекущиеДанные.Ученик;
//	ЗначениеОтбора = Новый Структура("Владелец", Владелец);
//	ПараметрыВыбора1 = Новый Структура("Отбор", ЗначениеОтбора);
//	
//	ОткрытьФорму("Справочник.LM_ДисконтныеКарты.ФормаВыбора", ПараметрыВыбора1, ЭтотОбъект);
//	
//КонецПроцедуры

&НаКлиенте
Процедура Ученики1ДисконтнаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)	
	СтандартнаяОбработка = Ложь;
	ПараметрыОтбора = Новый Структура("Владелец", Элементы.Ученики.ТекущиеДанные.Ученик); 
	ПараметрыОткрытия = Новый Структура("Отбор", ПараметрыОтбора); 
	ОткрытьФорму("Справочник.LM_ДисконтныеКарты.ФормаВыбора", ПараметрыОткрытия, Элемент, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЧасовПриИзменении(Элемент)
			
	ОбновитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура УченикиЧасыПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры


&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение и ЗначениеЗаполнено(Объект.Педагог) Тогда
		
		НомерБезНулей = Объект.Номер;
		Пока Найти(НомерБезНулей,"0") = 1 Цикл
			НомерБезНулей = Сред(НомерБезНулей,2); //удаляет лидирующие нули
		КонецЦикла;
			
		ИтогПроверки = ПроверитьДокументПоГрафикуРабочегоВремени();
		Если ИтогПроверки <> Неопределено Тогда 			
			
			ТекстОповещения = "Урок №"+НомерБезНулей+ " от " +Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Объект.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Объект.Дата-('00010101'-Объект.КоличествоЧасов),"ДФ=HH:mm") + " не входит в график учета рабочего времени педагога " 
			+ИтогПроверки.Педагог+ " (" +Формат(ИтогПроверки.Дата,"ДФ='ММММ гггг ""г"".'")+ ")!!!";
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(ТекстОповещения + Символы.ПС + "Продолжить запись урока?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументПересечения = ДокументПересекаетсяСДругими();
		Если ДокументПересечения <> Неопределено Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			
	        НомерБезНулей2 = ДокументПересечения.Номер;
			Пока Найти(НомерБезНулей2,"0") = 1 Цикл
				НомерБезНулей2 = Сред(НомерБезНулей2,2); //удаляет лидирующие нули
			КонецЦикла;
			
			Ответ = Вопрос("Урок №"+НомерБезНулей+ " от " +Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+ " с " +Формат(Объект.Дата,"ДФ=HH:mm")+ 
			" по " +Формат(Объект.Дата-('00010101'-Объект.КоличествоЧасов),"ДФ=HH:mm")+ " пересекается по времени с уроком №"+НомерБезНулей2+ 
			" с " +Формат(ДокументПересечения.Дата,"ДФ=HH:mm")+	" по " +Формат(ДокументПересечения.Дата-('00010101'-ДокументПересечения.КоличествоЧасов),"ДФ=HH:mm")
			+ ?(Объект.Педагог = ДокументПересечения.Педагог, Символы.ПС+ "по педагогу: " +ДокументПересечения.Педагог+ "!!!","")
			+ ?(Объект.Помещение = ДокументПересечения.Помещение, Символы.ПС+ "по помещению: " +ДокументПересечения.Помещение+ "!!!","") 
			+ Символы.ПС+ "Продолжить запись урока?", Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;

		КонецЕсли;    

	КонецЕсли;  	

КонецПроцедуры

Функция ДокументПересекаетсяСДругими()
	
	Структ = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) КАК Поле1
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Педагог = &Педагог
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Педагог", Объект.Педагог);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Объект.Дата-('00010101'-Объект.КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Структ.Вставить("Дата",РезультатЗапроса[0].Ссылка.Дата);
		Структ.Вставить("Педагог",РезультатЗапроса[0].Ссылка.Педагог);
		Структ.Вставить("Помещение",РезультатЗапроса[0].Ссылка.Помещение);
		Структ.Вставить("Ссылка",РезультатЗапроса[0].Ссылка);
		Структ.Вставить("КоличествоЧасов",РезультатЗапроса[0].Ссылка.КоличествоЧасов);
		Структ.Вставить("Номер",РезультатЗапроса[0].Ссылка.Номер);
		Возврат Структ;	
	КонецЕсли;
	
	
	//Пересечение по помещению
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Урок.Ссылка КАК Ссылка,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) КАК Поле1
	|ИЗ
	|	Документ.LM_Урок КАК Урок
	|ГДЕ
	|	(Урок.Дата МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока
	|			ИЛИ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(Урок.Дата, СЕКУНДА, -1), СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), Урок.КоличествоЧасов, СЕКУНДА)) МЕЖДУ &ДатаНачалаУрока И &ДатаОкончанияУрока)
	|	И Урок.Проведен
	|	И Урок.Помещение = &Помещение
	|	И Урок.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	//1. Чтобы искомый документ не начинался в период с Дата по (Дата+КолЧасов-1)
	Запрос.УстановитьПараметр("ДатаНачалаУрока", Объект.Дата);
	Запрос.УстановитьПараметр("ДатаОкончанияУрока", Объект.Дата-('00010101'-Объект.КоличествоЧасов)-1);
	
	
	//2. Чтобы искомый документ не заканчивался период с Дата по (Дата+КолЧасов-1)
	//этотДок с 11.00 до 12.00
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество()>0 Тогда
		Структ.Вставить("Дата",РезультатЗапроса[0].Ссылка.Дата);
		Структ.Вставить("Педагог",РезультатЗапроса[0].Ссылка.Педагог);
		Структ.Вставить("Помещение",РезультатЗапроса[0].Ссылка.Помещение);
		Структ.Вставить("Ссылка",РезультатЗапроса[0].Ссылка);
		Структ.Вставить("КоличествоЧасов",РезультатЗапроса[0].Ссылка.КоличествоЧасов);
		Структ.Вставить("Номер",РезультатЗапроса[0].Ссылка.Номер);
		Возврат Структ;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПроверитьДокументПоГрафикуРабочегоВремени()
	
	//Проверка урока на график габочего времени педагога
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГрафикРабочегоВремениПедагога.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.LM_ГрафикРабочегоВремениПедагога КАК ГрафикРабочегоВремениПедагога
	|ГДЕ
	|	ГрафикРабочегоВремениПедагога.Проведен
	|	И ГрафикРабочегоВремениПедагога.Педагог = &Педагог
	|	И ГрафикРабочегоВремениПедагога.Дата = &Дата";	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Педагог", Объект.Педагог); 	
	ГрафикиРабочегоВремени = Запрос.Выполнить().Выгрузить();
	
	Если ГрафикиРабочегоВремени.Количество()>0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата КАК Дата,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала КАК ВремяНачала,
		|	ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания КАК ВремяОкончания
		|ИЗ
		|	Документ.LM_ГрафикРабочегоВремениПедагога.ТЧ КАК ГрафикРабочегоВремениПедагогаТЧ
		|ГДЕ
		|	ГрафикРабочегоВремениПедагогаТЧ.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяНачала <= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.ВремяОкончания >= &ДатаДокумента
		|	И ГрафикРабочегоВремениПедагогаТЧ.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
		Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
		Запрос.УстановитьПараметр("Ссылка", ГрафикиРабочегоВремени[0].Ссылка);	
		КонецПериодаЭтогоДокумента = Объект.Дата - ('00010101' - Объект.КоличествоЧасов); //ДатаДокумента + КолЧасовДокумента
		Запрос.УстановитьПараметр("ДатаДокумента", '00010101' +(КонецПериодаЭтогоДокумента-НачалоДня(Объект.Дата)));//Дата-НачалоДня(Дата)=Часы
		
		СвободныеПериоды = Запрос.Выполнить().Выгрузить();
		
		Если СвободныеПериоды.Количество()>0 Тогда //То есть существует документ ГрафикУчетаРабВремени
			
		Иначе
			С = Новый Структура;
			С.Вставить("Ссылка",ГрафикиРабочегоВремени[0].Ссылка);
			С.Вставить("Педагог",ГрафикиРабочегоВремени[0].Ссылка.Педагог);
			С.Вставить("Дата",ГрафикиРабочегоВремени[0].Ссылка.Дата);
			Возврат С;
		КонецЕсли;
	КонецЕсли;
	
	//1. Найти все интервалы даты и время Педагога в графике
	//2. Проверить этот урок в интервале   
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОбновитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияДокумента(Команда)
	
	С = Новый Структура;
	С.Вставить("Документ",Объект.Ссылка);
	ОткрытьФорму("Отчет.LM_ДвиженияДокумента.Форма.ДвиженияДокумента",С ,ЭтаФорма, , , , ,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры


