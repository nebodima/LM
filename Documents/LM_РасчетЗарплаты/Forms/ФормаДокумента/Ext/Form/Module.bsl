
&НаКлиенте
Процедура ПериодПриИзменении(Элемент)	
	
	Объект.ДатаНачала = Период.ДатаНачала;
	Объект.ДатаОкончания = Период.ДатаОкончания;
	
	Объект.ДД.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТЧ(Команда)
	Объект.ДД.Очистить();
	ЗаполнитьТЧНаСервере();
КонецПроцедуры

Процедура ЗаполнитьТЧНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	LM_РасчетыПоЗарплатеОстаткиИОбороты.Ученик КАК Ученик,
		|	LM_РасчетыПоЗарплатеОстаткиИОбороты.Регистратор КАК Регистратор,
		|	LM_РасчетыПоЗарплатеОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
		|	LM_РасчетыПоЗарплатеОстаткиИОбороты.НеИзменять КАК НеИзменять
		|ИЗ
		|	РегистрНакопления.LM_РасчетыПоЗарплате.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, Авто, , ) КАК LM_РасчетыПоЗарплатеОстаткиИОбороты
		|ГДЕ
		|	LM_РасчетыПоЗарплатеОстаткиИОбороты.Организация = &Организация
		|	И LM_РасчетыПоЗарплатеОстаткиИОбороты.Контрагент = &Контрагент";	
	Запрос.УстановитьПараметр("Контрагент", Объект.Педагог);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.ДатаОкончания));
	РезультатЗапроса = Запрос.Выполнить();	
	Уроки = РезультатЗапроса.Выбрать();
	
	Пока Уроки.Следующий() Цикл		
		
		СтрокаТЧ = Объект.ДД.Добавить();
		СтрокаТЧ.Контрагент = Уроки.Ученик;
		СтрокаТЧ.Документ 	= Уроки.Регистратор;
		СтрокаТЧ.Сумма 		= Уроки.Регистратор.Сумма;
		СтрокаТЧ.Часы 		= Уроки.Регистратор.КоличествоЧасов;
		СтрокаТЧ.Начисление = Уроки.СуммаПриход;
		СтрокаТЧ.НеИзменять = Уроки.НеИзменять;
		СтрокаТЧ.КОплате 	= Уроки.СуммаПриход;
	
	КонецЦикла;
	
	Объект.СуммаДокумента 	= Объект.ДД.Итог("КОплате");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Период.ДатаНачала = Объект.ДатаНачала;
	Период.ДатаОкончания = Объект.ДатаОкончания;
	
	ОстатокВКассе = КассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПедагогПриИзменении(Элемент) 	
	Объект.ДД.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ДДПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.ДД.Итог("КОплате");
КонецПроцедуры

Функция КассаПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассаОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.LM_Касса.Остатки(, ) КАК КассаОстатки
		|ГДЕ
		|	КассаОстатки.Касса = &Касса";  	
	Запрос.УстановитьПараметр("Касса", Объект.Касса);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СуммаОстаток;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		ОстатокВКассе = КассаПриИзмененииНаСервере();
		Иначе
		ОстатокВКассе = 0;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОстатокПоКассе(Команда)
	ОстатокВКассе = КассаПриИзмененииНаСервере();	
КонецПроцедуры

Функция ПереместитьДеньгиНаСервере()
	
	НовПеремещение = Документы.LM_ПеремещениеДенег.СоздатьДокумент();
	НовПеремещение.ВидОперации 			= Перечисления.LM_ВидыОпераций.ВнутренняяКасса;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НовПеремещение.ДокументОснования 	= Объект.Ссылка;
	КонецЕсли;

	НовПеремещение.АвторДокумента 		= Пользователи.АвторизованныйПользователь();
	НовПеремещение.КассаОтправитель		= Объект.Касса;
	НовПеремещение.КассаПолучатель		= Справочники.Кассы.ПолучитьОсновнуюКассу();
	НовПеремещение.Клиент 				= Объект.Педагог;
	НовПеремещение.Сумма 				= КассаПриИзмененииНаСервере();
	НовПеремещение.Дата					= Объект.ДатаОкончания-1;
	НовПеремещение.Организация 			= Объект.Организация;
	
	Попытка
		НовПеремещение.Записать(РежимЗаписиДокумента.Проведение);
		Возврат НовПеремещение.Ссылка;
	Исключение
		Сообщить("Не удалось провести Перемещение!"+ " " +ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Документы.LM_ПеремещениеДенег.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура ПереместитьДеньги(Команда)
	               	
	Если ЗначениеЗаполнено(Объект.Пермещение) Тогда
		Сообщить("Невозможно создать еще одно Перемещение! Существует уже созданное ранее.");
		Возврат;
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(Объект.СуммаДокумента) и ЗначениеЗаполнено(Объект.Касса) и ЗначениеЗаполнено(Объект.Педагог) и ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.Пермещение = ПереместитьДеньгиНаСервере();
		//ОткрытьЗначение(Объект.Пермещение);
	Иначе
		Сообщить("Невозможно создать Перемещение! Возможно незаполнены поля: Касса, Педагог, СуммаДокумента, Период");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.ДД.Итог("Начисления");
КонецПроцедуры

Функция СделтьРКОНаСервере()
	
	НовРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
	НовРКО.ВидОперации 			= Перечисления.LM_ВидыОпераций.ВнутренняяКасса;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НовРКО.ДокументОснования 	= Объект.Ссылка;
	КонецЕсли;
	НовРКО.АвторДокумента 		= Пользователи.АвторизованныйПользователь();
	НовРКО.Касса 				= Объект.Касса;
	НовРКО.Клиент 				= Объект.Педагог;
	НовРКО.Организация 			= Объект.Организация;
	НовРКО.Сумма 				= Объект.СуммаДокумента;
	НовРКО.Дата					= Объект.ДатаОкончания-1;
	
	Попытка
		НовРКО.Записать(РежимЗаписиДокумента.Проведение);
		Возврат НовРКО.Ссылка;
	Исключение
		Сообщить("Не удалось провести РКО!"+ " " +ОписаниеОшибки());
	КонецПопытки;

	Возврат Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
	
КонецФункции

&НаКлиенте
Процедура СделтьРКО(Команда)
	
	Если ЗначениеЗаполнено(Объект.РКО) Тогда
		Сообщить("Невозможно создать еще один Расходный ордер! Существует уже созданный ранее.");
		Возврат;
	КонецЕсли; 	
	
	Если ЗначениеЗаполнено(Объект.СуммаДокумента) и ЗначениеЗаполнено(Объект.Касса) и ЗначениеЗаполнено(Объект.Педагог) и ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Объект.РКО = СделтьРКОНаСервере();
		//ОткрытьЗначение(Объект.РКО);
	Иначе
		Сообщить("РКО невозможно создать! Возможно незаполнены поля: Касса, Педагог, СуммаДокумента, Период");
	КонецЕсли;

КонецПроцедуры

Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);	
КонецПроцедуры
